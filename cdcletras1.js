var normal = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
var default_text = "Text";

function applyCharMap(map, text) {
  let out = "";
  for (let c of text.split("")) {
    if (map[c] !== undefined) out += map[c];
    else if (map[c.toLowerCase()] !== undefined) out += map[c.toLowerCase()];
    else out += c;
  }
  return out;
}

function invertedSquaresCharMapFun(text) {
  return applyCharMap(invertedSquaresCharMap, text);
}
function wideTextCharMapFun(text) {
  return applyCharMap(wideTextCharMap, text);
}
function squaresCharMapFun(text) {
  return applyCharMap(squaresCharMap, text);
}
function subscriptCharMapFun(text) {
  return applyCharMap(subscriptCharMap, text);
}
function bentTextCharMapFun(text) {
  return applyCharMap(bentTextCharMap, text);
}
function neonCharMapFun(text) {
  return applyCharMap(neonCharMap, text);
}
function futureAlienCharMapFun(text) {
  return applyCharMap(futureAlienCharMap, text);
}
function squiggleCharMapFun(text) {
  return applyCharMap(squiggleCharMap, text);
}
function squiggle2CharMapFun(text) {
  return applyCharMap(squiggle2CharMap, text);
}
function squiggle3CharMapFun(text) {
  return applyCharMap(squiggle3CharMap, text);
}
function squiggle4CharMapFun(text) {
  return applyCharMap(squiggle4CharMap, text);
}
function squiggle5CharMapFun(text) {
  return applyCharMap(squiggle5CharMap, text);
}
function squiggle6CharMapFun(text) {
  return applyCharMap(squiggle6CharMap, text);
}
function boldCharMapFun(text) {
  return applyCharMap(boldCharMap, text);
}
function oldEnglishCharMapFun(text) {
  return applyCharMap(oldEnglishCharMap, text);
}
function medievalCharMapFun(text) {
  return applyCharMap(medievalCharMap, text);
}
function cursiveCharMapFun(text) {
  return applyCharMap(cursiveCharMap, text);
}
function doubleStruckCharMapFun(text) {
  return applyCharMap(doubleStruckCharMap, text);
}
function italicCharMapFun(text) {
  return applyCharMap(italicCharMap, text);
}
function boldItalicCharMapFun(text) {
  return applyCharMap(boldItalicCharMap, text);
}
function monospaceCharMapFun(text) {
  return applyCharMap(monospaceCharMap, text);
}
function upperAnglesCharMapFun(text) {
  return applyCharMap(upperAnglesCharMap, text);
}
function greekCharMapFun(text) {
  return applyCharMap(greekCharMap, text);
}
function symbolsCharMapFun(text) {
  return applyCharMap(symbolsCharMap, text);
}
function currencyCharMapFun(text) {
  return applyCharMap(currencyCharMap, text);
}
function asianStyleCharMapFun(text) {
  return applyCharMap(asianStyleCharMap, text);
}
function asianStyle2CharMapFun(text) {
  return applyCharMap(asianStyle2CharMap, text);
}

var luni = new Lunicode();
luni.tools.creepify.options.maxHeight = 10;

function crazyWithFlourishOrSymbols(text) {
  if (Math.random() < 0.7) return wrapInSymbols(crazifyText(text), 2);
  else return wrapInFlourish(crazifyText(text), 2);
}

function illuminati(text) {
  return applyCharMap(doubleStruckCharMap, "𓂀" + text + "𓂀");
}

function textgun(text) {
  return "▄︻デ" + text.split("").join("&#823;") + "══━一";
}

function minigame(text) {
  return "★彡[" + luni.tools.tiny.encode(text) + "]彡★";
}

function pubggame1(text) {
  return applyCharMap(medievalCharMap, "꧁༒☬" + text + "☬༒꧂");
}

function pubggame2(text) {
  return applyCharMap(squiggle3CharMap, "꧁༺" + text + "༻꧂");
}

function pubggame3(text) {
  return applyCharMap(invertedSquaresCharMap, "꧁𓊈𒆜" + text + "𒆜𓊉꧂");
}

function bricks(text) {
  return applyCharMap(squaresCharMap, "▀▄▀▄▀▄" + text + "▀▄▀▄▀▄");
}

function bigrus(text) {
  return "█▓▒­░⡷⠂" + luni.tools.tiny.encode(text) + "⠐⢾░▒▓█";
}

function strikeThrough(text) {
  return text.split("").join("̶") + "̶";
}
function tildeStrikeThrough(text) {
  return text.split("").join("̴") + "̴";
}
function underline(text) {
  return text.split("").join("̲") + "̲";
}
function doubleUnderline(text) {
  return text.split("").join("̳") + "̳";
}
function slashThrough(text) {
  return text.split("").join("̷") + "̷";
}
function stinky(text) {
  return text.split("").join("̾") + "̾";
}
function heartsBetween(text) {
  return text.split("").join("♥");
}
function arrowBelow(text) {
  return text.split("").join("͎") + "͎";
}
function crossAboveBelow(text) {
  return text.split("").join("͓̽") + "͓̽";
}

const wingdingsCharMap = {
  0: "📁︎",
  1: "📂︎",
  2: "📄︎",
  3: "🗏︎",
  4: "🗐︎",
  5: "🗄︎",
  6: "⌛︎",
  7: "🖮︎",
  8: "🖰︎",
  9: "🖲︎",
  "!": "✏︎",
  '"': "✂︎",
  "#": "✁︎",
  $: "👓︎",
  "%": "🕭︎",
  "&": "🕮︎",
  "'": "🕯︎",
  "(": "🕿︎",
  ")": "✆︎",
  "*": "🖂︎",
  "+": "🖃︎",
  ",": "📪︎",
  "-": "📫︎",
  ".": "📬︎",
  "/": "📭︎",
  ":": "🖳︎",
  ";": "🖴︎",
  "<": "🖫︎",
  "=": "🖬︎",
  ">": "✇︎",
  "?": "✍︎",
  A: "✌︎",
  B: "👌︎",
  C: "👍︎",
  D: "👎︎",
  E: "☜︎",
  F: "☞︎",
  G: "☝︎",
  H: "☟︎",
  I: "✋︎",
  J: "☺︎",
  K: "😐︎",
  L: "☹︎",
  M: "💣︎",
  N: "☠︎",
  O: "⚐︎",
  P: "🏱︎",
  Q: "✈︎",
  R: "☼︎",
  S: "💧︎",
  T: "❄︎",
  U: "🕆︎",
  V: "✞︎",
  W: "🕈︎",
  X: "✠︎",
  Y: "✡︎",
  Z: "☪︎",
  "[": "☯︎",
  "\\": "ॐ︎",
  "]": "☸︎",
  "^": "♈︎",
  _: "♉︎",
  "`": "♊︎",
  a: "♋︎",
  b: "♌︎",
  c: "♍︎",
  d: "♎︎",
  e: "♏︎",
  f: "♐︎",
  g: "♑︎",
  h: "♒︎",
  i: "♓︎",
  j: "🙰",
  k: "🙵",
  l: "●︎",
  m: "❍︎",
  n: "■︎",
  o: "□︎",
  p: "◻︎",
  q: "❑︎",
  r: "❒︎",
  s: "⬧︎",
  t: "⧫︎",
  u: "◆︎",
  v: "❖︎",
  w: "⬥︎",
  x: "⌧︎",
  y: "⍓︎",
  z: "⌘︎",
  "{": "❀︎",
  "|": "✿︎",
  "}": "❝︎",
  "~": "❞︎",
  " ": "▯︎",
  "€": "⓪︎",
  " ": "①︎",
  "‚": "②︎",
  ƒ: "③︎",
  "„": "④︎",
  "…": "⑤︎",
  "†": "⑥︎",
  "‡": "⑦︎",
  ˆ: "⑧︎",
  "‰": "⑨︎",
  Š: "⑩︎",
  "‹": "⓿︎",
  Œ: "❶︎",
  " ": "❷︎",
  Ž: "❸︎",
  " ": "❹︎",
  " ": "❺︎",
  "‘": "❻︎",
  "’": "❼︎",
  "“": "❽︎",
  "”": "❾︎",
  "•": "❿︎",
  "–": "◻︎",
  "—": "◻︎",
  "˜": "◻︎",
  "™": "◻︎",
  š: "◻︎",
  "›": "◻︎",
  œ: "◻︎",
  " ": "◻︎",
  ž: "·︎",
  Ÿ: "•︎",
  "¡": "○︎",
  "¢": "⭕︎",
  "£": "◻︎",
  "¤": "◉︎",
  "¥": "◎︎",
  "¦": "◻︎",
  "§": "▪︎",
  "¨": "◻︎",
  "©": "◻︎",
  ª: "✦︎",
  "«": "★︎",
  "¬": "✶︎",
  "®": "✹︎",
  "¯": "✵︎",
  "°": "◻︎",
  "±": "⌖︎",
  "²": "⟡︎",
  "³": "⌑︎",
  "´": "◻︎",
  µ: "✪︎",
  "¶": "✰︎",
  "·": "🕐︎",
  "¸": "🕑︎",
  "¹": "🕒︎",
  º: "🕓︎",
  "»": "🕔︎",
  "¼": "🕕︎",
  "½": "🕖︎",
  "¾": "🕗︎",
  "¿": "🕘︎",
  À: "🕙︎",
  Á: "🕚︎",
  Â: "🕛︎",
  Ã: "◻︎",
  Ä: "◻︎",
  Å: "◻︎",
  Æ: "◻︎",
  Ç: "◻︎",
  È: "◻︎",
  É: "◻︎",
  Ê: "◻︎",
  Ë: "◻︎",
  Ì: "◻︎",
  Í: "◻︎",
  Î: "◻︎",
  Ï: "◻︎",
  Ð: "◻︎",
  Ñ: "◻︎",
  Ò: "◻︎",
  Ó: "◻︎",
  Ô: "◻︎",
  Õ: "⌫︎",
  Ö: "⌦︎",
  "×": "◻︎",
  Ø: "➢︎",
  Ù: "◻︎",
  Ú: "◻︎",
  Û: "◻︎",
  Ü: "➲︎",
  Ý: "◻︎",
  Þ: "◻︎",
  ß: "◻︎",
  à: "◻︎",
  á: "◻︎",
  â: "◻︎",
  ã: "◻︎",
  ä: "◻︎",
  å: "◻︎",
  æ: "◻︎",
  ç: "◻︎",
  è: "➔︎",
  é: "◻︎",
  ê: "◻︎",
  ë: "◻︎",
  ì: "◻︎",
  í: "◻︎",
  î: "◻︎",
  ï: "⇦︎",
  ð: "⇨︎",
  ñ: "⇧︎",
  ò: "⇩︎",
  ó: "⬄︎",
  ô: "⇳︎",
  õ: "⬀︎",
  ö: "⬁︎",
  "÷": "⬃︎",
  ø: "⬂︎",
  ù: "▭︎",
  ú: "▫︎",
  û: "✗︎",
  ü: "✓︎",
  ý: "☒︎",
  þ: "☑︎",
  ÿ: "◻︎",
};
function wingdings(text) {
  return text
    .split("")
    .map(function (a) {
      return wingdingsCharMap[a] ? wingdingsCharMap[a] : a;
    })
    .join("");
}

const vaporwaveCharMap = {
  " ": "　",
  "`": "`",
  1: "１",
  2: "２",
  3: "３",
  4: "４",
  5: "５",
  6: "６",
  7: "７",
  8: "８",
  9: "９",
  0: "０",
  "-": "－",
  "=": "＝",
  "~": "~",
  "!": "！",
  "@": "＠",
  "#": "＃",
  $: "＄",
  "%": "％",
  "^": "^",
  "&": "＆",
  "*": "＊",
  "(": "（",
  ")": "）",
  _: "_",
  "+": "＋",
  q: "ｑ",
  w: "ｗ",
  e: "ｅ",
  r: "ｒ",
  t: "ｔ",
  y: "ｙ",
  u: "ｕ",
  i: "ｉ",
  o: "ｏ",
  p: "ｐ",
  "[": "[",
  "]": "]",
  "\\": "\\",
  Q: "Ｑ",
  W: "Ｗ",
  E: "Ｅ",
  R: "Ｒ",
  T: "Ｔ",
  Y: "Ｙ",
  U: "Ｕ",
  I: "Ｉ",
  O: "Ｏ",
  P: "Ｐ",
  "{": "{",
  "}": "}",
  "|": "|",
  a: "ａ",
  s: "ｓ",
  d: "ｄ",
  f: "ｆ",
  g: "ｇ",
  h: "ｈ",
  j: "ｊ",
  k: "ｋ",
  l: "ｌ",
  ";": "；",
  "'": "＇",
  A: "Ａ",
  S: "Ｓ",
  D: "Ｄ",
  F: "Ｆ",
  G: "Ｇ",
  H: "Ｈ",
  J: "Ｊ",
  K: "Ｋ",
  L: "Ｌ",
  ":": "：",
  '"': '"',
  z: "ｚ",
  x: "ｘ",
  c: "ｃ",
  v: "ｖ",
  b: "ｂ",
  n: "ｎ",
  m: "ｍ",
  ",": "，",
  ".": "．",
  "/": "／",
  Z: "Ｚ",
  X: "Ｘ",
  C: "Ｃ",
  V: "Ｖ",
  B: "Ｂ",
  N: "Ｎ",
  M: "Ｍ",
  "<": "<",
  ">": ">",
  "?": "？",
};
function vaporwaveText(text) {
  var numSpaces = text.split(" ").length;
  text = applyCharMap(vaporwaveCharMap, text);
  var asianChars = getAsianChars(Math.max(3, numSpaces));
  if (numSpaces > 6)
    asianChars = asianChars
      .split("")
      .map((c) => c + ["", ""][Math.round(Math.random() * 0.6)])
      .join("");
  var outputs = [];
  outputs.push(text);
  return outputs.join();
}
function vaporwaveText1(text) {
  var numSpaces = text.split(" ").length;
  text = applyCharMap(vaporwaveCharMap, text);
  var asianChars = getAsianChars(Math.max(3, numSpaces));
  if (numSpaces > 6)
    asianChars = asianChars
      .split("")
      .map((c) => c + ["", ""][Math.round(Math.random() * 0.6)])
      .join("");
  var outputs = [];
  outputs.push(
    text
      .replace(/　/g, "░")
      .replace(/ａｅ/, "æ")
      .replace(/Ａ/g, "Λ")
      .replace(/Ｅ/g, function () {
        return Math.random() > 0.5 ? "Ξ" : "Σ";
      })
      .replace(/Ｏ/g, "♢")
  );
  return outputs.join();
}
function vaporwaveText2(text) {
  var numSpaces = text.split(" ").length;
  text = applyCharMap(vaporwaveCharMap, text);
  var asianChars = getAsianChars(Math.max(3, numSpaces));
  if (numSpaces > 6)
    asianChars = asianChars
      .split("")
      .map((c) => c + ["", ""][Math.round(Math.random() * 0.6)])
      .join("");
  var outputs = [];
  outputs.push("【﻿" + text + "】");
  return outputs.join();
}
function getAsianChars(n) {
  if (!n) n = 1;
  var chars =
    "リサフランク現代のコンピュ竹内 まりや若者が履く流行のスニーカー真夜中のドアホットドッグマスターストライカーソニーブギ新しい日の誕生ライフ - ヒスイ蒸気波 無線゠ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺ・ーヽヾヿぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをんゔゕゖ゙゚゛゜ゝゞゟ亜哀挨愛曖悪握圧扱宛嵐安案暗以衣位囲医依委威為畏胃尉異移萎偉椅彙意違維慰遺緯域育壱逸茨芋引印因咽姻員院淫陰飲隠韻右宇羽雨唄鬱畝浦運雲永泳英映栄営詠影鋭衛易疫益液駅悦越謁閲円延沿炎怨宴媛援園煙猿遠鉛塩演縁艶汚王凹央応往押旺欧殴桜翁奥横岡屋億憶臆虞乙俺卸音恩温穏下化火加可仮何花佳価果河苛科";
  var str = "";
  for (var i = 0; i < n; i++) {
    str += chars[Math.floor(Math.random() * chars.length)];
  }
  return str;
}

const flourishArray = [
  "꧁༒☬ [[text]] ☬༒꧂",
  "◥꧁ད [[text]] ཌ꧂◤",
  "★·.·´¯`·.·★ [[text]] ★·.·´¯`·.·★",
  "⚔️ [[text]] ⚔️",
  "꧁༒༻☬ད [[text]] ཌ☬༺༒꧂",
  "♪ღ♪*•.¸¸.•*¨¨*•.♪ [[text]] ♪ღ♪*•.¸¸.•*¨¨*•.♪ღ♪",
  "◥꧁ད ॐ卐[[text]] 卐ॐ ཌ꧂◤",
  "( ﾟ∀ﾟ)ﾉ【[[text]]】",
  "ღƪ(ˆ◡ˆ)ʃ♡ [[text]] ♡ƪ(ˆ◡ˆ)ʃ♪",
  "[[text]] ☜(`o´)",
  "⎝⎝✧GͥOͣDͫ✧⎠⎠ [[text]] ⎝⎝✧GͥOͣDͫ✧⎠⎠",
  "<:::::[]=¤ [[text]] (▀̿̿Ĺ̯̿̿▀̿ ̿)",
  "｡*ﾟ.*.｡(っ ᐛ )っ✂╰⋃╯ [[text]]",
  "┗(^o^ )┓三 [[text]] 三 ┗(^o^ )┓",
  "(ㅅꈍ﹃ꈍ)* [[text]] *(ꈍ﹃ꈍㅅ)♡",
  "¯_( ͡° ͜ʖ ͡°)_/¯ [[text]] ¯_( ͡° ͜ʖ ͡°)_/¯",
  "୧(•̀ᗝ•́)૭ [[text]] ୧(⇀‸↼‶)૭",
  "▁ ▂ ▄ ▅ ▆ ▇ █ [[text]] █ ▇ ▆ ▅ ▄ ▂ ▁",
  "°°°·.°·..·°¯°·._.· [[text]] ·._.·°¯°·.·° .·°°°",
  "¸,ø¤º°`°º¤ø,¸¸,ø¤º° [[text]] °º¤ø,¸¸,ø¤º°`°º¤ø,¸",
  "ıllıllı [[text]] ıllıllı",
  "•?((¯°·._.• [[text]] •._.·°¯))؟•",
  "▌│█║▌║▌║ [[text]] ║▌║▌║█│▌",
  "×º°”˜`”°º× [[text]] ×º°”˜`”°º×",
  "•]••´º´•» [[text]] «•´º´••[•",
  "*•.¸♡ [[text]] ♡¸.•*",
  "╰☆☆ [[text]] ☆☆╮",
  ".•°¤*(¯`★´¯)*¤° [[text]] °¤*(¯´★`¯)*¤°•.",
  "(¯´•._.• [[text]] •._.•´¯)",
  "¸„.-•~¹°”ˆ˜¨ [[text]] ¨˜ˆ”°¹~•-.„¸",
  "░▒▓█ [[text]] █▓▒░",
  "░▒▓█►─═  [[text]] ═─◄█▓▒░",
  "★彡 [[text]] 彡★",
  "•´¯`•. [[text]] .•´¯`•",
  "§.•´¨'°÷•..× [[text]] ×,.•´¨'°÷•..§",
  "•°¯`•• [[text]] ••´¯°•",
  "(¯`*•.¸,¤°´✿.｡.:* [[text]] *.:｡.✿`°¤,¸.•*´¯)",
  "|!¤*'~``~'*¤!| [[text]] |!¤*'~``~'*¤!|",
  "•._.••´¯``•.¸¸.•` [[text]] `•.¸¸.•´´¯`••._.•",
  "¸„.-•~¹°”ˆ˜¨ [[text]] ¨˜ˆ”°¹~•-.„¸",
  "(¯´•._.• [[text]] •._.•´¯)",
  "••¤(`×[¤ [[text]] ¤]×´)¤••",
  "•´¯`•» [[text]] «•´¯`•",
  " .o0×X×0o. [[text]] .o0×X×0o.",
  "¤¸¸.•´¯`•¸¸.•..>> [[text]] <<..•.¸¸•´¯`•.¸¸¤",
  "—(••÷[ [[text]] ]÷••)—",
  "¸,ø¤º°`°º¤ø,¸ [[text]] ¸,ø¤º°`°º¤ø,¸",
  "`•.¸¸.•´´¯`••._.• [[text]] •._.••`¯´´•.¸¸.•`",
  ",-*' ^ '~*-.,_,.-*~ [[text]] ~*-.,_,.-*~' ^ '*-,",
  "`•.,¸¸,.•´¯ [[text]] ¯`•.,¸¸,.•´",
  "↤↤↤↤↤ [[text]] ↦↦↦↦↦",
  "➶➶➶➶➶ [[text]] ➷➷➷➷➷",
  "↫↫↫↫↫ [[text]] ↬↬↬↬↬",
  "·.¸¸.·♩♪♫ [[text]] ♫♪♩·.¸¸.·",
  "【｡_｡】 [[text]] 【｡_｡】",
  "]|I{•------» [[text]] «------•}I|[",
  "▀▄▀▄▀▄ [[text]] ▄▀▄▀▄▀",
  "(-_-) [[text]] (-_-)",
  "•´¯`•. [[text]] .•´¯`•",
  "-漫~*'¨¯¨'*·舞~ [[text]] ~舞*'¨¯¨'*·~漫-",
  "๑۞๑,¸¸,ø¤º°`°๑۩ [[text]] ๑۩ ,¸¸,ø¤º°`°๑۞๑",
  ".•°¤*(¯`★´¯)*¤° [[text]] °¤*(¯´★`¯)*¤°•.",
  "••.•´¯`•.•• [[text]] ••.•´¯`•.••",
  "¤¸¸.•´¯`•¸¸.•..>> [[text]] <<..•.¸¸•´¯`•.¸¸¤",
  "◦•●◉✿ [[text]] ✿◉●•◦",
  "꧁𓊈𒆜 [[text]] 𒆜𓊉꧂",
  "╚»★«╝ [[text]] ╚»★«╝",
  "⫷ [[text]] ⫸",
  "-·=»‡«=·- [[text]] -·=»‡«=·-",
  "∙∙·▫▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ [[text]] ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫▫·∙∙",
  "¸¸♬·¯·♩¸¸♪·¯·♫¸¸ [[text]] ¸¸♫·¯·♪¸¸♩·¯·♬¸¸",
  "ஜ۩۞۩ஜ [[text]] ஜ۩۞۩ஜ",
  "¤ (¯´☆✭.¸_)¤ [[text]] ¤(_¸.✭☆´¯) ¤",
  "(¯`·.¸¸.·´¯`·.¸¸.-> [[text]] <-.¸¸.·´¯`·.¸¸.·´¯)",
  "✿.｡.:* ☆:**:. [[text]] .:**:.☆*.:｡.✿",
  ".•♫•♬• [[text]] •♬•♫•.",
  "ღ(¯`◕‿◕´¯) ♫ ♪ ♫ [[text]] ♫ ♪ ♫ (¯`◕‿◕´¯)ღ",
  "«-(¯`v´¯)-« [[text]] »-(¯`v´¯)-»",
];

function wrapInFlourish(text) {
  return flourishArray[
    Math.floor(Math.random() * flourishArray.length)
  ].replace("[[text]]", text);
}
function Flourishlist(number, text) {
  return flourishArray[number].replace("[[text]]", text);
}

function wrapInSymbols(text, number) {
  return randomSymbols(number) + "  " + text + "  " + randomSymbols(number);
}

function firework(text) {
  return text.split("").join("҉") + "҉";
}

function weirdBox(text) {
  return text.replace(/([^\s])/g, "[̲̅$1]");
}

function curlybrackets(text) {
  return text.replace(/([^\s])/g, "⧼$1&#828;⧽");
}

function singlewavyJoiner(text) {
  return "〜" + text.split("").join("∿") + "〜";
}

function thickBox(text) {
  return text.replace(/([^\s])/g, "⟦$1⟧");
}

function zigzagJoiner(text) {
  return text.replace(/([^\s])/g, "⦚$1⦚");
}

function hashJoiner(text) {
  return text.split("").join("⨳");
}

function starJoiner(text) {
  return text.replace(/([^\s])/g, "⦚$1⦚");
}

function connectedJoiner(text) {
  return text.split("").join("⊶");
}

function arrowjoin(text) {
  return text.replace(/([^\s])/g, "⦏$1&#x302;⦎");
}

function dotBoxtwo(text) {
  return text.split("").join("&#778; ⫶");
}

function dotBox(text) {
  return text.replace(/([^\s])/g, "꜍$1꜉");
}

function diametricBox(text) {
  return text.replace(/([^\s])/g, "⦑$1⦒");
}

function arrowBox(text) {
  return text.replace(/([^\s])/g, "⦏$1⦎");
}

function littleSparkles(text) {
  return "˜”*°•.˜”*°• " + text + " •°*”˜.•°*”˜";
}

function kirbyHug(text) {
  return "(っ◔◡◔)っ ♥ " + text + " ♥";
}

function dottyJoiner(text) {
  return "░" + text.split("").join("░") + "░";
}

function wavyJoiner(text) {
  return "≋" + text.split("").join("≋") + "≋";
}

function diametricAngleFrame(text) {
  return text.replace(/([^\s])/g, "『$1』");
}

function thickBlockFramed(text) {
  return text.replace(/([^\s])/g, "【$1】");
}
/* new added */
var newtext = {
  s1: {
    1: "&alpha;",
    2: "&#4310;",
    3: "&#392;",
    4: "&#1283;",
    5: "&#1213;",
    6: "&#989;",
    7: "&#608;",
    8: "&#1291;",
    9: "&iota;",
    10: "&#669;",
    11: "&#409;",
    12: "&#645;",
    13: "&#625;",
    14: "&#627;",
    15: "&sigma;",
    16: "&rho;",
    17: "&#985;",
    18: "&#638;",
    19: "&#642;",
    20: "&#410;",
    21: "&upsilon;",
    22: "&#651;",
    23: "&#623;",
    24: "x",
    25: "&#4327;",
    26: "&#549;",
    27: "A",
    28: "B",
    29: "C",
    30: "D",
    31: "E",
    32: "F",
    33: "G",
    34: "H",
    35: "I",
    36: "J",
    37: "K",
    38: "L",
    39: "M",
    40: "N",
    41: "O",
    42: "P",
    43: "Q",
    44: "R",
    45: "S",
    46: "T",
    47: "U",
    48: "V",
    49: "W",
    50: "X",
    51: "Y",
    52: "Z",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s2: {
    1: "&#41807;",
    2: "&#9837;",
    3: "&#9790;",
    4: "&#9687;",
    5: "&euro;",
    6: "&#988;",
    7: "&#10081;",
    8: "&#9796;",
    9: "&#9815;",
    10: "&#9834;",
    11: "&#1008;",
    12: "&#8627;",
    13: "&#9812;",
    14: "&#9835;",
    15: "&#8857;",
    16: "&rho;",
    17: "&#9773;",
    18: "&#9736;",
    19: "&#9442;",
    20: "&#9730;",
    21: "&#9739;",
    22: "&#10003;",
    23: "&omega;",
    24: "&#8984;",
    25: "&#9791;",
    26: "&#9761;",
    27: "&#41807;",
    28: "&#9837;",
    29: "&#9790;",
    30: "&#9687;",
    31: "&euro;",
    32: "&#988;",
    33: "&#10081;",
    34: "&#9796;",
    35: "&#9815;",
    36: "&#9834;",
    37: "&#1008;",
    38: "&#8627;",
    39: "&#9812;",
    40: "&#9835;",
    41: "&#8857;",
    42: "&rho;",
    43: "&#9773;",
    44: "&#9736;",
    45: "&#9442;",
    46: "&#9730;",
    47: "&#9739;",
    48: "&#10003;",
    49: "&omega;",
    50: "&#8984;",
    51: "&#9791;",
    52: "&#9761;",
    53: "&#10122;",
    54: "&#10123;",
    55: "&#10124;",
    56: "&#10125;",
    57: "&#10126;",
    58: "&#10127;",
    59: "&#10128;",
    60: "&#10129;",
    61: "&#10130;",
    62: "&#9450;",
  },
  s3: {
    1: "&#258;",
    2: "&beta;",
    3: "&#268;",
    4: "&#270;",
    5: "&#276;",
    6: "&#358;",
    7: "&#286;",
    8: "&#292;",
    9: "&#296;",
    10: "&#308;",
    11: "&#310;",
    12: "&#313;",
    13: "&#1052;",
    14: "&#323;",
    15: "&#336;",
    16: "&#1056;",
    17: "Q",
    18: "&#340;",
    19: "&#346;",
    20: "&#356;",
    21: "&Uacute;",
    22: "V",
    23: "&#372;",
    24: "&#1046;",
    25: "&#374;",
    26: "&#377;",
    27: "&#258;",
    28: "&beta;",
    29: "&#268;",
    30: "&#270;",
    31: "&#276;",
    32: "&#358;",
    33: "&#286;",
    34: "&#292;",
    35: "&#296;",
    36: "&#308;",
    37: "&#310;",
    38: "&#313;",
    39: "&#1052;",
    40: "&#323;",
    41: "&#336;",
    42: "&#1056;",
    43: "Q",
    44: "&#340;",
    45: "&#346;",
    46: "&#356;",
    47: "&Uacute;",
    48: "V",
    49: "&#372;",
    50: "&#1046;",
    51: "&#374;",
    52: "&#377;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s4: {
    1: "&#592;",
    2: "q",
    3: "&#596;",
    4: "p",
    5: "&#477;",
    6: "&#607;",
    7: "&#387;",
    8: "&#613;",
    9: "&#7433;",
    10: "&#638;",
    11: "&#670;",
    12: "l",
    13: "&#623;",
    14: "u",
    15: "o",
    16: "d",
    17: "b",
    18: "&#633;",
    19: "s",
    20: "&#647;",
    21: "n",
    22: "&#652;",
    23: "&#653;",
    24: "x",
    25: "&#654;",
    26: "z",
    27: "&#592;",
    28: "q",
    29: "&#596;",
    30: "p",
    31: "&#477;",
    32: "&#607;",
    33: "&#387;",
    34: "&#613;",
    35: "&#7433;",
    36: "&#638;",
    37: "&#670;",
    38: "l",
    39: "&#623;",
    40: "u",
    41: "o",
    42: "d",
    43: "b",
    44: "&#633;",
    45: "s",
    46: "&#647;",
    47: "n",
    48: "&#652;",
    49: "&#653;",
    50: "x",
    51: "&#654;",
    52: "z",
    53: "&#406;",
    54: "&#4357;",
    55: "&#400;",
    56: "&#12579;",
    57: "&#987;",
    58: "9",
    59: "&#12581;",
    60: "8",
    61: "6",
    62: "0",
  },
  s5: {
    1: "&Delta;",
    2: "&beta;",
    3: "&#262;",
    4: "&#272;",
    5: "&euro;",
    6: "&#8355;",
    7: "&#484;",
    8: "&#294;",
    9: "&#407;",
    10: "&#308;",
    11: "&#1180;",
    12: "&#321;",
    13: "&Mu;",
    14: "&#327;",
    15: "&Oslash;",
    16: "&#420;",
    17: "&Omega;",
    18: "&#344;",
    19: "&#350;",
    20: "&#358;",
    21: "&#7918;",
    22: "V",
    23: "&#372;",
    24: "&#1046;",
    25: "&yen;",
    26: "&#381;",
    27: "&Delta;",
    28: "&beta;",
    29: "&#262;",
    30: "&#272;",
    31: "&euro;",
    32: "&#8355;",
    33: "&#484;",
    34: "&#294;",
    35: "&#407;",
    36: "&#308;",
    37: "&#1180;",
    38: "&#321;",
    39: "&Mu;",
    40: "&#327;",
    41: "&Oslash;",
    42: "&#420;",
    43: "&Omega;",
    44: "&#344;",
    45: "&#350;",
    46: "&#358;",
    47: "&#7918;",
    48: "V",
    49: "&#372;",
    50: "&#1046;",
    51: "&yen;",
    52: "&#381;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s6: {
    1: "&alpha;",
    2: "&#595;",
    3: "&#2798;",
    4: "&part;",
    5: "&epsilon;",
    6: "&fnof;",
    7: "&#608;",
    8: "&#614;",
    9: "&#3648;",
    10: "&#669;",
    11: "&#1185;",
    12: "&#8467;",
    13: "&#625;",
    14: "&#627;",
    15: "&sigma;",
    16: "&rho;",
    17: "&phi;",
    18: "&#2792;",
    19: "&#3619;",
    20: "&#429;",
    21: "&micro;",
    22: "&#1141;",
    23: "&omega;",
    24: "&#1488;",
    25: "&#4327;",
    26: "&#438;",
    27: "&alpha;",
    28: "&#595;",
    29: "&#2798;",
    30: "&part;",
    31: "&epsilon;",
    32: "&fnof;",
    33: "&#608;",
    34: "&#614;",
    35: "&#3648;",
    36: "&#669;",
    37: "&#1185;",
    38: "&#8467;",
    39: "&#625;",
    40: "&#627;",
    41: "&sigma;",
    42: "&rho;",
    43: "&phi;",
    44: "&#2792;",
    45: "&#3619;",
    46: "&#429;",
    47: "&micro;",
    48: "&#1141;",
    49: "&omega;",
    50: "&#1488;",
    51: "&#4327;",
    52: "&#438;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s7: {
    1: "&#5609;",
    2: "&#5623;",
    3: "&#5205;",
    4: "&#5610;",
    5: "&#5620;",
    6: "&#5556;",
    7: "&#484;",
    8: "&#5500;",
    9: "&#5029;",
    10: "&#5262;",
    11: "&#5845;",
    12: "&#5290;",
    13: "&#5616;",
    14: "&#5198;",
    15: "&#5597;",
    16: "&#5229;",
    17: "&#586;",
    18: "&#5511;",
    19: "&#5397;",
    20: "&#19973;",
    21: "&#5196;",
    22: "&#5167;",
    23: "&#5615;",
    24: "&#5741;",
    25: "&#435;",
    26: "&#20057;",
    27: "&#5609;",
    28: "&#5623;",
    29: "&#5205;",
    30: "&#5610;",
    31: "&#5620;",
    32: "&#5556;",
    33: "&#484;",
    34: "&#5500;",
    35: "&#5029;",
    36: "&#5262;",
    37: "&#5845;",
    38: "&#5290;",
    39: "&#5616;",
    40: "&#5198;",
    41: "&#5597;",
    42: "&#5229;",
    43: "&#586;",
    44: "&#5511;",
    45: "&#5397;",
    46: "&#19973;",
    47: "&#5196;",
    48: "&#5167;",
    49: "&#5615;",
    50: "&#5741;",
    51: "&#435;",
    52: "&#20057;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s8: {
    1: "&#4315;",
    2: "&#4329;",
    3: "&#4308;",
    4: "&#4331;",
    5: "&#4318;",
    6: "f",
    7: "&#4330;",
    8: "h",
    9: "&#7990;",
    10: "&#4325;",
    11: "&kappa;",
    12: "l",
    13: "&#4317;",
    14: "&#8134;",
    15: "&otilde;",
    16: "&rho;",
    17: "&#4306;",
    18: "&Gamma;",
    19: "&#4336;",
    20: "&#3923;",
    21: "&upsilon;",
    22: "&#8023;",
    23: "w",
    24: "&#4335;",
    25: "&#4327;",
    26: "&#576;",
    27: "&#4315;",
    28: "&#4329;",
    29: "&#4308;",
    30: "&#4331;",
    31: "&#4318;",
    32: "f",
    33: "&#4330;",
    34: "h",
    35: "&#7990;",
    36: "&#4325;",
    37: "&kappa;",
    38: "l",
    39: "&#4317;",
    40: "&#8134;",
    41: "&otilde;",
    42: "&rho;",
    43: "&#4306;",
    44: "&Gamma;",
    45: "&#4336;",
    46: "&#3923;",
    47: "&upsilon;",
    48: "&#8023;",
    49: "w",
    50: "&#4335;",
    51: "&#4327;",
    52: "&#576;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s9: {
    1: "&#940;",
    2: "&#1074;",
    3: "&sigmaf;",
    4: "&#545;",
    5: "&#941;",
    6: "&#1171;",
    7: "&#291;",
    8: "&#295;",
    9: "&#943;",
    10: "&#1112;",
    11: "&#311;",
    12: "&#315;",
    13: "&#1084;",
    14: "&#942;",
    15: "&#972;",
    16: "&rho;",
    17: "q",
    18: "&#341;",
    19: "&#351;",
    20: "&#355;",
    21: "&ugrave;",
    22: "&nu;",
    23: "&#974;",
    24: "x",
    25: "&#1095;",
    26: "&#382;",
    27: "&#940;",
    28: "&#1074;",
    29: "&sigmaf;",
    30: "&#545;",
    31: "&#941;",
    32: "&#1171;",
    33: "&#291;",
    34: "&#295;",
    35: "&#943;",
    36: "&#1112;",
    37: "&#311;",
    38: "&#315;",
    39: "&#1084;",
    40: "&#942;",
    41: "&#972;",
    42: "&rho;",
    43: "q",
    44: "&#341;",
    45: "&#351;",
    46: "&#355;",
    47: "&ugrave;",
    48: "&nu;",
    49: "&#974;",
    50: "x",
    51: "&#1095;",
    52: "&#382;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s10: {
    1: "&#41707;",
    2: "&#41155;",
    3: "&#41976;",
    4: "&#41045;",
    5: "&#41823;",
    6: "&#41240;",
    7: "&#41037;",
    8: "&#42075;",
    9: "&#41105;",
    10: "&#41005;",
    11: "&#40983;",
    12: "&#42130;",
    13: "&#41042;",
    14: "&#41081;",
    15: "&#41346;",
    16: "&#41571;",
    17: "&#41080;",
    18: "&#42131;",
    19: "&#41754;",
    20: "&#42181;",
    21: "&#41991;",
    22: "&#41949;",
    23: "&#41296;",
    24: "&#41427;",
    25: "&#42015;",
    26: "&#41076;",
    27: "&#41707;",
    28: "&#41155;",
    29: "&#41976;",
    30: "&#41045;",
    31: "&#41823;",
    32: "&#41240;",
    33: "&#41037;",
    34: "&#42075;",
    35: "&#41105;",
    36: "&#41005;",
    37: "&#40983;",
    38: "&#42130;",
    39: "&#41042;",
    40: "&#41081;",
    41: "&#41346;",
    42: "&#41571;",
    43: "&#41080;",
    44: "&#42131;",
    45: "&#41754;",
    46: "&#42181;",
    47: "&#41991;",
    48: "&#41949;",
    49: "&#41296;",
    50: "&#41427;",
    51: "&#42015;",
    52: "&#41076;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s11: {
    1: "&#1044;",
    2: "&#1041;",
    3: "C",
    4: "D",
    5: "&Xi;",
    6: "F",
    7: "G",
    8: "H",
    9: "I",
    10: "J",
    11: "&#1180;",
    12: "L",
    13: "M",
    14: "&#1048;",
    15: "&#1060;",
    16: "P",
    17: "&#490;",
    18: "&#1071;",
    19: "S",
    20: "&Gamma;",
    21: "&#1062;",
    22: "V",
    23: "&#1065;",
    24: "&#1046;",
    25: "&#1059;",
    26: "Z",
    27: "&#1044;",
    28: "&#1041;",
    29: "C",
    30: "D",
    31: "&Xi;",
    32: "F",
    33: "G",
    34: "H",
    35: "I",
    36: "J",
    37: "&#1180;",
    38: "L",
    39: "M",
    40: "&#1048;",
    41: "&#1060;",
    42: "P",
    43: "&#490;",
    44: "&#1071;",
    45: "S",
    46: "&Gamma;",
    47: "&#1062;",
    48: "V",
    49: "&#1065;",
    50: "&#1046;",
    51: "&#1059;",
    52: "Z",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s12: {
    1: "&#41807;",
    2: "&#41731;",
    3: "&#41555;",
    4: "&#41016;",
    5: "&#41823;",
    6: "&#41863;",
    7: "&#41029;",
    8: "&#41157;",
    9: "&#40996;",
    10: "&#41005;",
    11: "&#40984;",
    12: "&#42130;",
    13: "&#41141;",
    14: "&#41508;",
    15: "&#41126;",
    16: "&#41571;",
    17: "&#41392;",
    18: "&#41706;",
    19: "&#41751;",
    20: "&#42180;",
    21: "&#40974;",
    22: "&#41204;",
    23: "&#41295;",
    24: "&#41660;",
    25: "&#41769;",
    26: "&#41076;",
    27: "&#41807;",
    28: "&#41731;",
    29: "&#41555;",
    30: "&#41016;",
    31: "&#41823;",
    32: "&#41863;",
    33: "&#41029;",
    34: "&#41157;",
    35: "&#40996;",
    36: "&#41005;",
    37: "&#40984;",
    38: "&#42130;",
    39: "&#41141;",
    40: "&#41508;",
    41: "&#41126;",
    42: "&#41571;",
    43: "&#41392;",
    44: "&#41706;",
    45: "&#41751;",
    46: "&#42180;",
    47: "&#40974;",
    48: "&#41204;",
    49: "&#41295;",
    50: "&#41660;",
    51: "&#41769;",
    52: "&#41076;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s13: {
    1: "&#41708;",
    2: "&#41203;",
    3: "&#41556;",
    4: "&#42159;",
    5: "&#41922;",
    6: "&#41648;",
    7: "&#41804;",
    8: "&#41053;",
    9: "&#42128;",
    10: "&#42171;",
    11: "&#40984;",
    12: "&#42130;",
    13: "&#41141;",
    14: "&#41674;",
    15: "&#41266;",
    16: "&#41571;",
    17: "&#41392;",
    18: "&#41706;",
    19: "&#41433;",
    20: "&#42180;",
    21: "&#42148;",
    22: "&#42150;",
    23: "&#41296;",
    24: "&#41575;",
    25: "&#41766;",
    26: "&#41076;",
    27: "&#41708;",
    28: "&#41203;",
    29: "&#41556;",
    30: "&#42159;",
    31: "&#41922;",
    32: "&#41648;",
    33: "&#41804;",
    34: "&#41053;",
    35: "&#42128;",
    36: "&#42171;",
    37: "&#40984;",
    38: "&#42130;",
    39: "&#41141;",
    40: "&#41674;",
    41: "&#41266;",
    42: "&#41571;",
    43: "&#41392;",
    44: "&#41706;",
    45: "&#41433;",
    46: "&#42180;",
    47: "&#42148;",
    48: "&#42150;",
    49: "&#41296;",
    50: "&#41575;",
    51: "&#41766;",
    52: "&#41076;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s14: {
    1: "&Lambda;",
    2: "&#998;",
    3: "&#12552;",
    4: "&ETH;",
    5: "&#400;",
    6: "F",
    7: "&#403;",
    8: "&#1085;",
    9: "&#618;",
    10: "&#65420;",
    11: "&#1178;",
    12: "&#321;",
    13: "&#3057;",
    14: "&#1051;",
    15: "&Oslash;",
    16: "&thorn;",
    17: "&#1192;",
    18: "&#23610;",
    19: "&#12425;",
    20: "&#356;",
    21: "&#1062;",
    22: "&#404;",
    23: "&#412;",
    24: "&chi;",
    25: "&#996;",
    26: "&#7828;",
    27: "&Lambda;",
    28: "&#998;",
    29: "&#12552;",
    30: "&ETH;",
    31: "&#400;",
    32: "F",
    33: "&#403;",
    34: "&#1085;",
    35: "&#618;",
    36: "&#65420;",
    37: "&#1178;",
    38: "&#321;",
    39: "&#3057;",
    40: "&#1051;",
    41: "&Oslash;",
    42: "&thorn;",
    43: "&#1192;",
    44: "&#23610;",
    45: "&#12425;",
    46: "&#356;",
    47: "&#1062;",
    48: "&#404;",
    49: "&#412;",
    50: "&chi;",
    51: "&#996;",
    52: "&#7828;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s15: {
    1: "&#411;",
    2: "&#385;",
    3: "&#391;",
    4: "&#394;",
    5: "&#1028;",
    6: "&#401;",
    7: "&#403;",
    8: "&#1223;",
    9: "&#406;",
    10: "&#646;",
    11: "&#408;",
    12: "&#1340;",
    13: "M",
    14: "&#413;",
    15: "&#416;",
    16: "&#420;",
    17: "&#418;",
    18: "&#422;",
    19: "&#423;",
    20: "&#428;",
    21: "&#434;",
    22: "&#404;",
    23: "&#412;",
    24: "&#1202;",
    25: "&#435;",
    26: "&#548;",
    27: "&#411;",
    28: "&#385;",
    29: "&#391;",
    30: "&#394;",
    31: "&#1028;",
    32: "&#401;",
    33: "&#403;",
    34: "&#1223;",
    35: "&#406;",
    36: "&#646;",
    37: "&#408;",
    38: "&#1340;",
    39: "M",
    40: "&#413;",
    41: "&#416;",
    42: "&#420;",
    43: "&#418;",
    44: "&#422;",
    45: "&#423;",
    46: "&#428;",
    47: "&#434;",
    48: "&#404;",
    49: "&#412;",
    50: "&#1202;",
    51: "&#435;",
    52: "&#548;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s16: {
    1: "&#41074;",
    2: "&#41712;",
    3: "&#41007;",
    4: "&#41120;",
    5: "&#41532;",
    6: "&#41246;",
    7: "&#41029;",
    8: "&#41833;",
    9: "&#41105;",
    10: "&#42171;",
    11: "&#40983;",
    12: "&#42130;",
    13: "&#41141;",
    14: "&#41674;",
    15: "&#41126;",
    16: "&#41571;",
    17: "&#41079;",
    18: "&#41733;",
    19: "&#41754;",
    20: "&#41686;",
    21: "&#41991;",
    22: "&#41008;",
    23: "&#41295;",
    24: "&#41426;",
    25: "&#42014;",
    26: "&#41076;",
    27: "&#41074;",
    28: "&#41712;",
    29: "&#41007;",
    30: "&#41120;",
    31: "&#41532;",
    32: "&#41246;",
    33: "&#41029;",
    34: "&#41833;",
    35: "&#41105;",
    36: "&#42171;",
    37: "&#40983;",
    38: "&#42130;",
    39: "&#41141;",
    40: "&#41674;",
    41: "&#41126;",
    42: "&#41571;",
    43: "&#41079;",
    44: "&#41733;",
    45: "&#41754;",
    46: "&#41686;",
    47: "&#41991;",
    48: "&#41008;",
    49: "&#41295;",
    50: "&#41426;",
    51: "&#42014;",
    52: "&#41076;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s17: {
    1: "&#1337;",
    2: "&#1349;",
    3: "&#1351;",
    4: "&#1338;",
    5: "&#541;",
    6: "&#1330;",
    7: "&#1331;",
    8: "&#615;",
    9: "&#639;",
    10: "&#669;",
    11: "&#409;",
    12: "&#645;",
    13: "&#653;",
    14: "&#1356;",
    15: "&#1342;",
    16: "&rho;",
    17: "&phi;",
    18: "&#1360;",
    19: "&#1359;",
    20: "&#1333;",
    21: "&#1348;",
    22: "&#1506;",
    23: "&#1377;",
    24: "&#1347;",
    25: "&#1358;",
    26: "&#1344;",
    27: "&#1337;",
    28: "&#1349;",
    29: "&#1351;",
    30: "&#1338;",
    31: "&#541;",
    32: "&#1330;",
    33: "&#1331;",
    34: "&#615;",
    35: "&#639;",
    36: "&#669;",
    37: "&#409;",
    38: "&#645;",
    39: "&#653;",
    40: "&#1356;",
    41: "&#1342;",
    42: "&rho;",
    43: "&phi;",
    44: "&#1360;",
    45: "&#1359;",
    46: "&#1333;",
    47: "&#1348;",
    48: "&#1506;",
    49: "&#1377;",
    50: "&#1347;",
    51: "&#1358;",
    52: "&#1344;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s18: {
    1: "&alpha;",
    2: "&szlig;",
    3: "&sigmaf;",
    4: "d",
    5: "&epsilon;",
    6: "&fnof;",
    7: "g",
    8: "h",
    9: "&iuml;",
    10: "&#1397;",
    11: "&kappa;",
    12: "&#65434;",
    13: "m",
    14: "&eta;",
    15: "&oplus;",
    16: "p",
    17: "&Omega;",
    18: "r",
    19: "&scaron;",
    20: "&dagger;",
    21: "u",
    22: "&forall;",
    23: "&omega;",
    24: "x",
    25: "&psi;",
    26: "z",
    27: "&alpha;",
    28: "&szlig;",
    29: "&sigmaf;",
    30: "d",
    31: "&epsilon;",
    32: "&fnof;",
    33: "g",
    34: "h",
    35: "&iuml;",
    36: "&#1397;",
    37: "&kappa;",
    38: "&#65434;",
    39: "m",
    40: "&eta;",
    41: "&oplus;",
    42: "p",
    43: "&Omega;",
    44: "r",
    45: "&scaron;",
    46: "&dagger;",
    47: "u",
    48: "&forall;",
    49: "&omega;",
    50: "x",
    51: "&psi;",
    52: "z",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s19: {
    1: "&#3588;",
    2: "&#4330;",
    3: "&#2414;",
    4: "&#4331;",
    5: "&#2799;",
    6: "&#1330;",
    7: "&#2797;",
    8: "&#1210;",
    9: "&#639;",
    10: "&#646;",
    11: "&#1179;",
    12: "&#1350;",
    13: "&#625;",
    14: "&#1352;",
    15: "&#2790;",
    16: "&#447;",
    17: "&#1193;",
    18: "&#1360;",
    19: "&sigmaf;",
    20: "&#2670;",
    21: "&upsilon;",
    22: "&#3182;",
    23: "&omega;",
    24: "&#2794;",
    25: "&#1506;",
    26: "&#2749;",
    27: "&#3588;",
    28: "&#4330;",
    29: "&#2414;",
    30: "&#4331;",
    31: "&#2799;",
    32: "&#1330;",
    33: "&#2797;",
    34: "&#1210;",
    35: "&#639;",
    36: "&#646;",
    37: "&#1179;",
    38: "&#1350;",
    39: "&#625;",
    40: "&#1352;",
    41: "&#2790;",
    42: "&#447;",
    43: "&#1193;",
    44: "&#1360;",
    45: "&sigmaf;",
    46: "&#2670;",
    47: "&upsilon;",
    48: "&#3182;",
    49: "&omega;",
    50: "&#2794;",
    51: "&#1506;",
    52: "&#2749;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s20: {
    1: "&#1072;",
    2: "&#1073;",
    3: "c",
    4: "&#1076;",
    5: "&#1105;",
    6: "f",
    7: "g",
    8: "&#1085;",
    9: "&#1111;",
    10: "j",
    11: "&#1082;",
    12: "&#1075;",
    13: "&#1131;",
    14: "&#1087;",
    15: "&#1139;",
    16: "p",
    17: "&#1092;",
    18: "&#1103;",
    19: "$",
    20: "&#1090;",
    21: "&#1094;",
    22: "&#1141;",
    23: "&#1097;",
    24: "&#1078;",
    25: "&#1095;",
    26: "&#1079;",
    27: "&#1040;",
    28: "&#1041;",
    29: "C",
    30: "&#1044;",
    31: "&#1028;",
    32: "F",
    33: "G",
    34: "H",
    35: "&#1031;",
    36: "J",
    37: "&#1050;",
    38: "&#1043;",
    39: "&#1130;",
    40: "&#1049;",
    41: "&#1138;",
    42: "P",
    43: "&#1060;",
    44: "&#1071;",
    45: "$",
    46: "T",
    47: "&#1062;",
    48: "&#1140;",
    49: "&#1064;",
    50: "&#1046;",
    51: "&#1063;",
    52: "&#1047;",
    53: "1",
    54: "2",
    55: "3",
    56: "4",
    57: "5",
    58: "6",
    59: "7",
    60: "8",
    61: "9",
    62: "0",
  },
  s21: {
    1: "a&#830;",
    2: "b&#830;",
    3: "c&#830;",
    4: "d&#830;",
    5: "e&#830;",
    6: "f&#830;",
    7: "g&#830;",
    8: "h&#830;",
    9: "i&#830;",
    10: "j&#830;",
    11: "k&#830;",
    12: "l&#830;",
    13: "m&#830;",
    14: "n&#830;",
    15: "o&#830;",
    16: "p&#830;",
    17: "q&#830;",
    18: "r&#830;",
    19: "s&#830;",
    20: "t&#830;",
    21: "u&#830;",
    22: "v&#830;",
    23: "w&#830;",
    24: "x&#830;",
    25: "y&#830;",
    26: "z&#830;",
    27: "A&#830;",
    28: "B&#830;",
    29: "C&#830;",
    30: "D&#830;",
    31: "E&#830;",
    32: "F&#830;",
    33: "G&#830;",
    34: "H&#830;",
    35: "I&#830;",
    36: "J&#830;",
    37: "K&#830;",
    38: "L&#830;",
    39: "M&#830;",
    40: "N&#830;",
    41: "O&#830;",
    42: "P&#830;",
    43: "Q&#830;",
    44: "R&#830;",
    45: "S&#830;",
    46: "T&#830;",
    47: "U&#830;",
    48: "V&#830;",
    49: "W&#830;",
    50: "X&#830;",
    51: "Y&#830;",
    52: "Z&#830;",
    53: "1&#830;",
    54: "2&#830;",
    55: "3&#830;",
    56: "4&#830;",
    57: "5&#830;",
    58: "6&#830;",
    59: "7&#830;",
    60: "8&#830;",
    61: "9&#830;",
    62: "0&#830;",
  },
  s22: {
    1: "a&#838;",
    2: "b&#838;",
    3: "c&#838;",
    4: "d&#838;",
    5: "e&#838;",
    6: "f&#838;",
    7: "g&#838;",
    8: "h&#838;",
    9: "i&#838;",
    10: "j&#838;",
    11: "k&#838;",
    12: "l&#838;",
    13: "m&#838;",
    14: "n&#838;",
    15: "o&#838;",
    16: "p&#838;",
    17: "q&#838;",
    18: "r&#838;",
    19: "s&#838;",
    20: "t&#838;",
    21: "u&#838;",
    22: "v&#838;",
    23: "w&#838;",
    24: "x&#838;",
    25: "y&#838;",
    26: "z&#838;",
    27: "A&#838;",
    28: "B&#838;",
    29: "C&#838;",
    30: "D&#838;",
    31: "E&#838;",
    32: "F&#838;",
    33: "G&#838;",
    34: "H&#838;",
    35: "I&#838;",
    36: "J&#838;",
    37: "K&#838;",
    38: "L&#838;",
    39: "M&#838;",
    40: "N&#838;",
    41: "O&#838;",
    42: "P&#838;",
    43: "Q&#838;",
    44: "R&#838;",
    45: "S&#838;",
    46: "T&#838;",
    47: "U&#838;",
    48: "V&#838;",
    49: "W&#838;",
    50: "X&#838;",
    51: "Y&#838;",
    52: "Z&#838;",
    53: "1&#838;",
    54: "2&#838;",
    55: "3&#838;",
    56: "4&#838;",
    57: "5&#838;",
    58: "6&#838;",
    59: "7&#838;",
    60: "8&#838;",
    61: "9&#838;",
    62: "0&#838;",
  },
  s23: {
    1: "a&#826;",
    2: "b&#826;",
    3: "c&#826;",
    4: "d&#826;",
    5: "e&#826;",
    6: "f&#826;",
    7: "g&#826;",
    8: "h&#826;",
    9: "i&#826;",
    10: "j&#826;",
    11: "k&#826;",
    12: "l&#826;",
    13: "m&#826;",
    14: "n&#826;",
    15: "o&#826;",
    16: "p&#826;",
    17: "q&#826;",
    18: "r&#826;",
    19: "s&#826;",
    20: "t&#826;",
    21: "u&#826;",
    22: "v&#826;",
    23: "w&#826;",
    24: "x&#826;",
    25: "y&#826;",
    26: "z&#826;",
    27: "A&#826;",
    28: "B&#826;",
    29: "C&#826;",
    30: "D&#826;",
    31: "E&#826;",
    32: "F&#826;",
    33: "G&#826;",
    34: "H&#826;",
    35: "I&#826;",
    36: "J&#826;",
    37: "K&#826;",
    38: "L&#826;",
    39: "M&#826;",
    40: "N&#826;",
    41: "O&#826;",
    42: "P&#826;",
    43: "Q&#826;",
    44: "R&#826;",
    45: "S&#826;",
    46: "T&#826;",
    47: "U&#826;",
    48: "V&#826;",
    49: "W&#826;",
    50: "X&#826;",
    51: "Y&#826;",
    52: "Z&#826;",
    53: "1&#826;",
    54: "2&#826;",
    55: "3&#826;",
    56: "4&#826;",
    57: "5&#826;",
    58: "6&#826;",
    59: "7&#826;",
    60: "8&#826;",
    61: "9&#826;",
    62: "0&#826;",
  },
  s24: {
    1: "a&#857;",
    2: "b&#857;",
    3: "c&#857;",
    4: "d&#857;",
    5: "e&#857;",
    6: "f&#857;",
    7: "g&#857;",
    8: "h&#857;",
    9: "i&#857;",
    10: "j&#857;",
    11: "k&#857;",
    12: "l&#857;",
    13: "m&#857;",
    14: "n&#857;",
    15: "o&#857;",
    16: "p&#857;",
    17: "q&#857;",
    18: "r&#857;",
    19: "s&#857;",
    20: "t&#857;",
    21: "u&#857;",
    22: "v&#857;",
    23: "w&#857;",
    24: "x&#857;",
    25: "y&#857;",
    26: "z&#857;",
    27: "A&#857;",
    28: "B&#857;",
    29: "C&#857;",
    30: "D&#857;",
    31: "E&#857;",
    32: "F&#857;",
    33: "G&#857;",
    34: "H&#857;",
    35: "I&#857;",
    36: "J&#857;",
    37: "K&#857;",
    38: "L&#857;",
    39: "M&#857;",
    40: "N&#857;",
    41: "O&#857;",
    42: "P&#857;",
    43: "Q&#857;",
    44: "R&#857;",
    45: "S&#857;",
    46: "T&#857;",
    47: "U&#857;",
    48: "V&#857;",
    49: "W&#857;",
    50: "X&#857;",
    51: "Y&#857;",
    52: "Z&#857;",
    53: "1&#857;",
    54: "2&#857;",
    55: "3&#857;",
    56: "4&#857;",
    57: "5&#857;",
    58: "6&#857;",
    59: "7&#857;",
    60: "8&#857;",
    61: "9&#857;",
    62: "0&#857;",
  },
  s25: {
    1: "a&#799;",
    2: "b&#799;",
    3: "c&#799;",
    4: "d&#799;",
    5: "e&#799;",
    6: "f&#799;",
    7: "g&#799;",
    8: "h&#799;",
    9: "i&#799;",
    10: "j&#799;",
    11: "k&#799;",
    12: "l&#799;",
    13: "m&#799;",
    14: "n&#799;",
    15: "o&#799;",
    16: "p&#799;",
    17: "q&#799;",
    18: "r&#799;",
    19: "s&#799;",
    20: "t&#799;",
    21: "u&#799;",
    22: "v&#799;",
    23: "w&#799;",
    24: "x&#799;",
    25: "y&#799;",
    26: "z&#799;",
    27: "A&#799;",
    28: "B&#799;",
    29: "C&#799;",
    30: "D&#799;",
    31: "E&#799;",
    32: "F&#799;",
    33: "G&#799;",
    34: "H&#799;",
    35: "I&#799;",
    36: "J&#799;",
    37: "K&#799;",
    38: "L&#799;",
    39: "M&#799;",
    40: "N&#799;",
    41: "O&#799;",
    42: "P&#799;",
    43: "Q&#799;",
    44: "R&#799;",
    45: "S&#799;",
    46: "T&#799;",
    47: "U&#799;",
    48: "V&#799;",
    49: "W&#799;",
    50: "X&#799;",
    51: "Y&#799;",
    52: "Z&#799;",
    53: "1&#799;",
    54: "2&#799;",
    55: "3&#799;",
    56: "4&#799;",
    57: "5&#799;",
    58: "6&#799;",
    59: "7&#799;",
    60: "8&#799;",
    61: "9&#799;",
    62: "0&#799;",
  },
  s26: {
    1: "a&#846;",
    2: "b&#846;",
    3: "c&#846;",
    4: "d&#846;",
    5: "e&#846;",
    6: "f&#846;",
    7: "g&#846;",
    8: "h&#846;",
    9: "i&#846;",
    10: "j&#846;",
    11: "k&#846;",
    12: "l&#846;",
    13: "m&#846;",
    14: "n&#846;",
    15: "o&#846;",
    16: "p&#846;",
    17: "q&#846;",
    18: "r&#846;",
    19: "s&#846;",
    20: "t&#846;",
    21: "u&#846;",
    22: "v&#846;",
    23: "w&#846;",
    24: "x&#846;",
    25: "y&#846;",
    26: "z&#846;",
    27: "A&#846;",
    28: "B&#846;",
    29: "C&#846;",
    30: "D&#846;",
    31: "E&#846;",
    32: "F&#846;",
    33: "G&#846;",
    34: "H&#846;",
    35: "I&#846;",
    36: "J&#846;",
    37: "K&#846;",
    38: "L&#846;",
    39: "M&#846;",
    40: "N&#846;",
    41: "O&#846;",
    42: "P&#846;",
    43: "Q&#846;",
    44: "R&#846;",
    45: "S&#846;",
    46: "T&#846;",
    47: "U&#846;",
    48: "V&#846;",
    49: "W&#846;",
    50: "X&#846;",
    51: "Y&#846;",
    52: "Z&#846;",
    53: "1&#846;",
    54: "2&#846;",
    55: "3&#846;",
    56: "4&#846;",
    57: "5&#846;",
    58: "6&#846;",
    59: "7&#846;",
    60: "8&#846;",
    61: "9&#846;",
    62: "0&#846;",
  },
  s27: {
    1: "a&#829;&#851;",
    2: "b&#829;&#851;",
    3: "c&#829;&#851;",
    4: "d&#829;&#851;",
    5: "e&#829;&#851;",
    6: "f&#829;&#851;",
    7: "g&#829;&#851;",
    8: "h&#829;&#851;",
    9: "i&#829;&#851;",
    10: "j&#829;&#851;",
    11: "k&#829;&#851;",
    12: "l&#829;&#851;",
    13: "m&#829;&#851;",
    14: "n&#829;&#851;",
    15: "o&#829;&#851;",
    16: "p&#829;&#851;",
    17: "q&#829;&#851;",
    18: "r&#829;&#851;",
    19: "s&#829;&#851;",
    20: "t&#829;&#851;",
    21: "u&#829;&#851;",
    22: "v&#829;&#851;",
    23: "w&#829;&#851;",
    24: "x&#829;&#851;",
    25: "y&#829;&#851;",
    26: "z&#829;&#851;",
    27: "A&#829;&#851;",
    28: "B&#829;&#851;",
    29: "C&#829;&#851;",
    30: "D&#829;&#851;",
    31: "E&#829;&#851;",
    32: "F&#829;&#851;",
    33: "G&#829;&#851;",
    34: "H&#829;&#851;",
    35: "I&#829;&#851;",
    36: "J&#829;&#851;",
    37: "K&#829;&#851;",
    38: "L&#829;&#851;",
    39: "M&#829;&#851;",
    40: "N&#829;&#851;",
    41: "O&#829;&#851;",
    42: "P&#829;&#851;",
    43: "Q&#829;&#851;",
    44: "R&#829;&#851;",
    45: "S&#829;&#851;",
    46: "T&#829;&#851;",
    47: "U&#829;&#851;",
    48: "V&#829;&#851;",
    49: "W&#829;&#851;",
    50: "X&#829;&#851;",
    51: "Y&#829;&#851;",
    52: "Z&#829;&#851;",
    53: "1&#829;&#851;",
    54: "2&#829;&#851;",
    55: "3&#829;&#851;",
    56: "4&#829;&#851;",
    57: "5&#829;&#851;",
    58: "6&#829;&#851;",
    59: "7&#829;&#851;",
    60: "8&#829;&#851;",
    61: "9&#829;&#851;",
    62: "0&#829;&#851;",
  },
  s29: {
    1: "&#120458;&#823;",
    2: "&#120459;&#823;",
    3: "&#120460;&#823;",
    4: "&#120461;&#823;",
    5: "&#120462;&#823;",
    6: "&#120463;&#823;",
    7: "&#120464;&#823;",
    8: "&#120465;&#823;",
    9: "&#120466;&#823;",
    10: "&#120467;&#823;",
    11: "&#120468;&#823;",
    12: "&#120469;&#823;",
    13: "&#120470;&#823;",
    14: "&#120471;&#823;",
    15: "&#120472;&#823;",
    16: "&#120473;&#823;",
    17: "&#120474;&#823;",
    18: "&#120475;&#823;",
    19: "&#120476;&#823;",
    20: "&#120477;&#823;",
    21: "&#120478;&#823;",
    22: "&#120479;&#823;",
    23: "&#120480;&#823;",
    24: "&#120481;&#823;",
    25: "&#120482;&#823;",
    26: "&#120483;&#823;",
    27: "&#120432;&#823;",
    28: "&#120433;&#823;",
    29: "&#120434;&#823;",
    30: "&#120435;&#823;",
    31: "&#120436;&#823;",
    32: "&#120437;&#823;",
    33: "&#120438;&#823;",
    34: "&#120439;&#823;",
    35: "&#120440;&#823;",
    36: "&#120441;&#823;",
    37: "&#120442;&#823;",
    38: "&#120443;&#823;",
    39: "&#120444;&#823;",
    40: "&#120445;&#823;",
    41: "&#120446;&#823;",
    42: "&#120447;&#823;",
    43: "&#120448;&#823;",
    44: "&#120449;&#823;",
    45: "&#120450;&#823;",
    46: "&#120451;&#823;",
    47: "&#120452;&#823;",
    48: "&#120453;&#823;",
    49: "&#120454;&#823;",
    50: "&#120455;&#823;",
    51: "&#120456;&#823;",
    52: "&#120457;&#823;",
    53: "&#120823;&#823;",
    54: "&#120824;&#823;",
    55: "&#120825;&#823;",
    56: "&#120826;&#823;",
    57: "&#120827;&#823;",
    58: "&#120828;&#823;",
    59: "&#120829;&#823;",
    60: "&#120830;&#823;",
    61: "&#120831;&#823;",
    62: "&#120822;&#823;",
  },
  s30: {
    1: "a&#866;",
    2: "b&#866;",
    3: "c&#866;",
    4: "d&#866;",
    5: "e&#866;",
    6: "f&#866;",
    7: "g&#866;",
    8: "h&#866;",
    9: "i&#866;",
    10: "j&#866;",
    11: "k&#866;",
    12: "l&#866;",
    13: "m&#866;",
    14: "n&#866;",
    15: "o&#866;",
    16: "p&#866;",
    17: "q&#866;",
    18: "r&#866;",
    19: "s&#866;",
    20: "t&#866;",
    21: "u&#866;",
    22: "v&#866;",
    23: "w&#866;",
    24: "x&#866;",
    25: "y&#866;",
    26: "z&#866;",
    27: "A&#866;",
    28: "B&#866;",
    29: "C&#866;",
    30: "D&#866;",
    31: "E&#866;",
    32: "F&#866;",
    33: "G&#866;",
    34: "H&#866;",
    35: "I&#866;",
    36: "J&#866;",
    37: "K&#866;",
    38: "L&#866;",
    39: "M&#866;",
    40: "N&#866;",
    41: "O&#866;",
    42: "P&#866;",
    43: "Q&#866;",
    44: "R&#866;",
    45: "S&#866;",
    46: "T&#866;",
    47: "U&#866;",
    48: "V&#866;",
    49: "W&#866;",
    50: "X&#866;",
    51: "Y&#866;",
    52: "Z&#866;",
    53: "1&#866;",
    54: "2&#866;",
    55: "3&#866;",
    56: "4&#866;",
    57: "5&#866;",
    58: "6&#866;",
    59: "7&#866;",
    60: "8&#866;",
    61: "9&#866;",
    62: "0&#866;",
  },
  s31: {
    1: "a&#828;",
    2: "b&#828;",
    3: "c&#828;",
    4: "d&#828;",
    5: "e&#828;",
    6: "f&#828;",
    7: "g&#828;",
    8: "h&#828;",
    9: "i&#828;",
    10: "j&#828;",
    11: "k&#828;",
    12: "l&#828;",
    13: "m&#828;",
    14: "n&#828;",
    15: "o&#828;",
    16: "p&#828;",
    17: "q&#828;",
    18: "r&#828;",
    19: "s&#828;",
    20: "t&#828;",
    21: "u&#828;",
    22: "v&#828;",
    23: "w&#828;",
    24: "x&#828;",
    25: "y&#828;",
    26: "z&#828;",
    27: "A&#828;",
    28: "B&#828;",
    29: "C&#828;",
    30: "D&#828;",
    31: "E&#828;",
    32: "F&#828;",
    33: "G&#828;",
    34: "H&#828;",
    35: "I&#828;",
    36: "J&#828;",
    37: "K&#828;",
    38: "L&#828;",
    39: "M&#828;",
    40: "N&#828;",
    41: "O&#828;",
    42: "P&#828;",
    43: "Q&#828;",
    44: "R&#828;",
    45: "S&#828;",
    46: "T&#828;",
    47: "U&#828;",
    48: "V&#828;",
    49: "W&#828;",
    50: "X&#828;",
    51: "Y&#828;",
    52: "Z&#828;",
    53: "1&#828;",
    54: "2&#828;",
    55: "3&#828;",
    56: "4&#828;",
    57: "5&#828;",
    58: "6&#828;",
    59: "7&#828;",
    60: "8&#828;",
    61: "9&#828;",
    62: "0&#828;",
  },
};

function Change(intext, id) {
  var text = "";

  var intext = intext;
  if (intext.length == 0) return;

  for (i = 0; i < intext.length; i++) {
    var c = intext.charAt(i),
      loc = normal.indexOf(c) + 1;
    if (c == " ") {
      text += " ";
    } else if (!loc) {
      text += c;
    } else {
      text += newtext[id][loc];
    }
  }
  return text;
}

/* eslint-disable */
const futureAlienCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "ᗩ",
  b: "ᗷ",
  c: "ᑢ",
  d: "ᕲ",
  e: "ᘿ",
  f: "ᖴ",
  g: "ᘜ",
  h: "ᕼ",
  i: "ᓰ",
  j: "ᒚ",
  k: "ᖽᐸ",
  l: "ᒪ",
  m: "ᘻ",
  n: "ᘉ",
  o: "ᓍ",
  p: "ᕵ",
  q: "ᕴ",
  r: "ᖇ",
  s: "S",
  t: "ᖶ",
  u: "ᑘ",
  v: "ᐺ",
  w: "ᘺ",
  x: "᙭",
  y: "ᖻ",
  z: "ᗱ",
  A: "ᗩ",
  B: "ᗷ",
  C: "ᑢ",
  D: "ᕲ",
  E: "ᘿ",
  F: "ᖴ",
  G: "ᘜ",
  H: "ᕼ",
  I: "ᓰ",
  J: "ᒚ",
  K: "ᖽᐸ",
  L: "ᒪ",
  M: "ᘻ",
  N: "ᘉ",
  O: "ᓍ",
  P: "ᕵ",
  Q: "ᕴ",
  R: "ᖇ",
  S: "S",
  T: "ᖶ",
  U: "ᑘ",
  V: "ᐺ",
  W: "ᘺ",
  X: "᙭",
  Y: "ᖻ",
  Z: "ᗱ",
};
const squiggle6CharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "ค",
  b: "๖",
  c: "¢",
  d: "໓",
  e: "ē",
  f: "f",
  g: "ງ",
  h: "h",
  i: "i",
  j: "ว",
  k: "k",
  l: "l",
  m: "๓",
  n: "ຖ",
  o: "໐",
  p: "p",
  q: "๑",
  r: "r",
  s: "Ş",
  t: "t",
  u: "น",
  v: "ง",
  w: "ຟ",
  x: "x",
  y: "ฯ",
  z: "ຊ",
  A: "ค",
  B: "๖",
  C: "¢",
  D: "໓",
  E: "ē",
  F: "f",
  G: "ງ",
  H: "h",
  I: "i",
  J: "ว",
  K: "k",
  L: "l",
  M: "๓",
  N: "ຖ",
  O: "໐",
  P: "p",
  Q: "๑",
  R: "r",
  S: "Ş",
  T: "t",
  U: "น",
  V: "ง",
  W: "ຟ",
  X: "x",
  Y: "ฯ",
  Z: "ຊ",
};
const squiggle5CharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "ą",
  b: "ც",
  c: "ƈ",
  d: "ɖ",
  e: "ɛ",
  f: "ʄ",
  g: "ɠ",
  h: "ɧ",
  i: "ı",
  j: "ʝ",
  k: "ƙ",
  l: "Ɩ",
  m: "ɱ",
  n: "ŋ",
  o: "ơ",
  p: "℘",
  q: "զ",
  r: "ཞ",
  s: "ʂ",
  t: "ɬ",
  u: "ų",
  v: "۷",
  w: "ῳ",
  x: "ҳ",
  y: "ყ",
  z: "ʑ",
  A: "ą",
  B: "ც",
  C: "ƈ",
  D: "ɖ",
  E: "ɛ",
  F: "ʄ",
  G: "ɠ",
  H: "ɧ",
  I: "ı",
  J: "ʝ",
  K: "ƙ",
  L: "Ɩ",
  M: "ɱ",
  N: "ŋ",
  O: "ơ",
  P: "℘",
  Q: "զ",
  R: "ཞ",
  S: "ʂ",
  T: "ɬ",
  U: "ų",
  V: "۷",
  W: "ῳ",
  X: "ҳ",
  Y: "ყ",
  Z: "ʑ",
};
const asianStyle2CharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "ﾑ",
  b: "乃",
  c: "ᄃ",
  d: "り",
  e: "乇",
  f: "ｷ",
  g: "ム",
  h: "ん",
  i: "ﾉ",
  j: "ﾌ",
  k: "ズ",
  l: "ﾚ",
  m: "ﾶ",
  n: "刀",
  o: "の",
  p: "ｱ",
  q: "ゐ",
  r: "尺",
  s: "丂",
  t: "ｲ",
  u: "ひ",
  v: "√",
  w: "W",
  x: "ﾒ",
  y: "ﾘ",
  z: "乙",
  A: "ﾑ",
  B: "乃",
  C: "ᄃ",
  D: "り",
  E: "乇",
  F: "ｷ",
  G: "ム",
  H: "ん",
  I: "ﾉ",
  J: "ﾌ",
  K: "ズ",
  L: "ﾚ",
  M: "ﾶ",
  N: "刀",
  O: "の",
  P: "ｱ",
  Q: "ゐ",
  R: "尺",
  S: "丂",
  T: "ｲ",
  U: "ひ",
  V: "√",
  W: "W",
  X: "ﾒ",
  Y: "ﾘ",
  Z: "乙",
};
const asianStyleCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "卂",
  b: "乃",
  c: "匚",
  d: "ᗪ",
  e: "乇",
  f: "千",
  g: "Ꮆ",
  h: "卄",
  i: "丨",
  j: "ﾌ",
  k: "Ҝ",
  l: "ㄥ",
  m: "爪",
  n: "几",
  o: "ㄖ",
  p: "卩",
  q: "Ɋ",
  r: "尺",
  s: "丂",
  t: "ㄒ",
  u: "ㄩ",
  v: "ᐯ",
  w: "山",
  x: "乂",
  y: "ㄚ",
  z: "乙",
  A: "卂",
  B: "乃",
  C: "匚",
  D: "ᗪ",
  E: "乇",
  F: "千",
  G: "Ꮆ",
  H: "卄",
  I: "丨",
  J: "ﾌ",
  K: "Ҝ",
  L: "ㄥ",
  M: "爪",
  N: "几",
  O: "ㄖ",
  P: "卩",
  Q: "Ɋ",
  R: "尺",
  S: "丂",
  T: "ㄒ",
  U: "ㄩ",
  V: "ᐯ",
  W: "山",
  X: "乂",
  Y: "ㄚ",
  Z: "乙",
};
const squaresCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "🄰",
  b: "🄱",
  c: "🄲",
  d: "🄳",
  e: "🄴",
  f: "🄵",
  g: "🄶",
  h: "🄷",
  i: "🄸",
  j: "🄹",
  k: "🄺",
  l: "🄻",
  m: "🄼",
  n: "🄽",
  o: "🄾",
  p: "🄿",
  q: "🅀",
  r: "🅁",
  s: "🅂",
  t: "🅃",
  u: "🅄",
  v: "🅅",
  w: "🅆",
  x: "🅇",
  y: "🅈",
  z: "🅉",
  A: "🄰",
  B: "🄱",
  C: "🄲",
  D: "🄳",
  E: "🄴",
  F: "🄵",
  G: "🄶",
  H: "🄷",
  I: "🄸",
  J: "🄹",
  K: "🄺",
  L: "🄻",
  M: "🄼",
  N: "🄽",
  O: "🄾",
  P: "🄿",
  Q: "🅀",
  R: "🅁",
  S: "🅂",
  T: "🅃",
  U: "🅄",
  V: "🅅",
  W: "🅆",
  X: "🅇",
  Y: "🅈",
  Z: "🅉",
};
const squiggle4CharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "Ꮧ",
  b: "Ᏸ",
  c: "ፈ",
  d: "Ꮄ",
  e: "Ꮛ",
  f: "Ꭶ",
  g: "Ꮆ",
  h: "Ꮒ",
  i: "Ꭵ",
  j: "Ꮰ",
  k: "Ꮶ",
  l: "Ꮭ",
  m: "Ꮇ",
  n: "Ꮑ",
  o: "Ꭷ",
  p: "Ꭾ",
  q: "Ꭴ",
  r: "Ꮢ",
  s: "Ꮥ",
  t: "Ꮦ",
  u: "Ꮼ",
  v: "Ꮙ",
  w: "Ꮗ",
  x: "ጀ",
  y: "Ꭹ",
  z: "ፚ",
  A: "Ꮧ",
  B: "Ᏸ",
  C: "ፈ",
  D: "Ꮄ",
  E: "Ꮛ",
  F: "Ꭶ",
  G: "Ꮆ",
  H: "Ꮒ",
  I: "Ꭵ",
  J: "Ꮰ",
  K: "Ꮶ",
  L: "Ꮭ",
  M: "Ꮇ",
  N: "Ꮑ",
  O: "Ꭷ",
  P: "Ꭾ",
  Q: "Ꭴ",
  R: "Ꮢ",
  S: "Ꮥ",
  T: "Ꮦ",
  U: "Ꮼ",
  V: "Ꮙ",
  W: "Ꮗ",
  X: "ጀ",
  Y: "Ꭹ",
  Z: "ፚ",
};
const neonCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "ᗩ",
  b: "ᗷ",
  c: "ᑕ",
  d: "ᗪ",
  e: "E",
  f: "ᖴ",
  g: "G",
  h: "ᕼ",
  i: "I",
  j: "ᒍ",
  k: "K",
  l: "ᒪ",
  m: "ᗰ",
  n: "ᑎ",
  o: "O",
  p: "ᑭ",
  q: "ᑫ",
  r: "ᖇ",
  s: "ᔕ",
  t: "T",
  u: "ᑌ",
  v: "ᐯ",
  w: "ᗯ",
  x: "᙭",
  y: "Y",
  z: "ᘔ",
  A: "ᗩ",
  B: "ᗷ",
  C: "ᑕ",
  D: "ᗪ",
  E: "E",
  F: "ᖴ",
  G: "G",
  H: "ᕼ",
  I: "I",
  J: "ᒍ",
  K: "K",
  L: "ᒪ",
  M: "ᗰ",
  N: "ᑎ",
  O: "O",
  P: "ᑭ",
  Q: "ᑫ",
  R: "ᖇ",
  S: "ᔕ",
  T: "T",
  U: "ᑌ",
  V: "ᐯ",
  W: "ᗯ",
  X: "᙭",
  Y: "Y",
  Z: "ᘔ",
};
const squiggle3CharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "ǟ",
  b: "ɮ",
  c: "ƈ",
  d: "ɖ",
  e: "ɛ",
  f: "ʄ",
  g: "ɢ",
  h: "ɦ",
  i: "ɨ",
  j: "ʝ",
  k: "ӄ",
  l: "ʟ",
  m: "ʍ",
  n: "ռ",
  o: "օ",
  p: "ք",
  q: "զ",
  r: "ʀ",
  s: "ֆ",
  t: "ȶ",
  u: "ʊ",
  v: "ʋ",
  w: "ա",
  x: "Ӽ",
  y: "ʏ",
  z: "ʐ",
  A: "ǟ",
  B: "ɮ",
  C: "ƈ",
  D: "ɖ",
  E: "ɛ",
  F: "ʄ",
  G: "ɢ",
  H: "ɦ",
  I: "ɨ",
  J: "ʝ",
  K: "ӄ",
  L: "ʟ",
  M: "ʍ",
  N: "ռ",
  O: "օ",
  P: "ք",
  Q: "զ",
  R: "ʀ",
  S: "ֆ",
  T: "ȶ",
  U: "ʊ",
  V: "ʋ",
  W: "ա",
  X: "Ӽ",
  Y: "ʏ",
  Z: "ʐ",
};
const monospaceCharMap = {
  0: "𝟶",
  1: "𝟷",
  2: "𝟸",
  3: "𝟹",
  4: "𝟺",
  5: "𝟻",
  6: "𝟼",
  7: "𝟽",
  8: "𝟾",
  9: "𝟿",
  a: "𝚊",
  b: "𝚋",
  c: "𝚌",
  d: "𝚍",
  e: "𝚎",
  f: "𝚏",
  g: "𝚐",
  h: "𝚑",
  i: "𝚒",
  j: "𝚓",
  k: "𝚔",
  l: "𝚕",
  m: "𝚖",
  n: "𝚗",
  o: "𝚘",
  p: "𝚙",
  q: "𝚚",
  r: "𝚛",
  s: "𝚜",
  t: "𝚝",
  u: "𝚞",
  v: "𝚟",
  w: "𝚠",
  x: "𝚡",
  y: "𝚢",
  z: "𝚣",
  A: "𝙰",
  B: "𝙱",
  C: "𝙲",
  D: "𝙳",
  E: "𝙴",
  F: "𝙵",
  G: "𝙶",
  H: "𝙷",
  I: "𝙸",
  J: "𝙹",
  K: "𝙺",
  L: "𝙻",
  M: "𝙼",
  N: "𝙽",
  O: "𝙾",
  P: "𝙿",
  Q: "𝚀",
  R: "𝚁",
  S: "𝚂",
  T: "𝚃",
  U: "𝚄",
  V: "𝚅",
  W: "𝚆",
  X: "𝚇",
  Y: "𝚈",
  Z: "𝚉",
};
const boldItalicCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "𝙖",
  b: "𝙗",
  c: "𝙘",
  d: "𝙙",
  e: "𝙚",
  f: "𝙛",
  g: "𝙜",
  h: "𝙝",
  i: "𝙞",
  j: "𝙟",
  k: "𝙠",
  l: "𝙡",
  m: "𝙢",
  n: "𝙣",
  o: "𝙤",
  p: "𝙥",
  q: "𝙦",
  r: "𝙧",
  s: "𝙨",
  t: "𝙩",
  u: "𝙪",
  v: "𝙫",
  w: "𝙬",
  x: "𝙭",
  y: "𝙮",
  z: "𝙯",
  A: "𝘼",
  B: "𝘽",
  C: "𝘾",
  D: "𝘿",
  E: "𝙀",
  F: "𝙁",
  G: "𝙂",
  H: "𝙃",
  I: "𝙄",
  J: "𝙅",
  K: "𝙆",
  L: "𝙇",
  M: "𝙈",
  N: "𝙉",
  O: "𝙊",
  P: "𝙋",
  Q: "𝙌",
  R: "𝙍",
  S: "𝙎",
  T: "𝙏",
  U: "𝙐",
  V: "𝙑",
  W: "𝙒",
  X: "𝙓",
  Y: "𝙔",
  Z: "𝙕",
};
const boldCharMap = {
  0: "𝟎",
  1: "𝟏",
  2: "𝟐",
  3: "𝟑",
  4: "𝟒",
  5: "𝟓",
  6: "𝟔",
  7: "𝟕",
  8: "𝟖",
  9: "𝟗",
  a: "𝐚",
  b: "𝐛",
  c: "𝐜",
  d: "𝐝",
  e: "𝐞",
  f: "𝐟",
  g: "𝐠",
  h: "𝐡",
  i: "𝐢",
  j: "𝐣",
  k: "𝐤",
  l: "𝐥",
  m: "𝐦",
  n: "𝐧",
  o: "𝐨",
  p: "𝐩",
  q: "𝐪",
  r: "𝐫",
  s: "𝐬",
  t: "𝐭",
  u: "𝐮",
  v: "𝐯",
  w: "𝐰",
  x: "𝐱",
  y: "𝐲",
  z: "𝐳",
  A: "𝐀",
  B: "𝐁",
  C: "𝐂",
  D: "𝐃",
  E: "𝐄",
  F: "𝐅",
  G: "𝐆",
  H: "𝐇",
  I: "𝐈",
  J: "𝐉",
  K: "𝐊",
  L: "𝐋",
  M: "𝐌",
  N: "𝐍",
  O: "𝐎",
  P: "𝐏",
  Q: "𝐐",
  R: "𝐑",
  S: "𝐒",
  T: "𝐓",
  U: "𝐔",
  V: "𝐕",
  W: "𝐖",
  X: "𝐗",
  Y: "𝐘",
  Z: "𝐙",
};
const italicCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "𝘢",
  b: "𝘣",
  c: "𝘤",
  d: "𝘥",
  e: "𝘦",
  f: "𝘧",
  g: "𝘨",
  h: "𝘩",
  i: "𝘪",
  j: "𝘫",
  k: "𝘬",
  l: "𝘭",
  m: "𝘮",
  n: "𝘯",
  o: "𝘰",
  p: "𝘱",
  q: "𝘲",
  r: "𝘳",
  s: "𝘴",
  t: "𝘵",
  u: "𝘶",
  v: "𝘷",
  w: "𝘸",
  x: "𝘹",
  y: "𝘺",
  z: "𝘻",
  A: "𝘈",
  B: "𝘉",
  C: "𝘊",
  D: "𝘋",
  E: "𝘌",
  F: "𝘍",
  G: "𝘎",
  H: "𝘏",
  I: "𝘐",
  J: "𝘑",
  K: "𝘒",
  L: "𝘓",
  M: "𝘔",
  N: "𝘕",
  O: "𝘖",
  P: "𝘗",
  Q: "𝘘",
  R: "𝘙",
  S: "𝘚",
  T: "𝘛",
  U: "𝘜",
  V: "𝘝",
  W: "𝘞",
  X: "𝘟",
  Y: "𝘠",
  Z: "𝘡",
};
const squiggle2CharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "α",
  b: "Ⴆ",
  c: "ƈ",
  d: "ԃ",
  e: "ҽ",
  f: "ϝ",
  g: "ɠ",
  h: "ԋ",
  i: "ι",
  j: "ʝ",
  k: "ƙ",
  l: "ʅ",
  m: "ɱ",
  n: "ɳ",
  o: "σ",
  p: "ρ",
  q: "ϙ",
  r: "ɾ",
  s: "ʂ",
  t: "ƚ",
  u: "υ",
  v: "ʋ",
  w: "ɯ",
  x: "x",
  y: "ყ",
  z: "ȥ",
  A: "A",
  B: "B",
  C: "C",
  D: "D",
  E: "E",
  F: "F",
  G: "G",
  H: "H",
  I: "I",
  J: "J",
  K: "K",
  L: "L",
  M: "M",
  N: "N",
  O: "O",
  P: "P",
  Q: "Q",
  R: "R",
  S: "S",
  T: "T",
  U: "U",
  V: "V",
  W: "W",
  X: "X",
  Y: "Y",
  Z: "Z",
};
const currencyCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "₳",
  b: "฿",
  c: "₵",
  d: "Đ",
  e: "Ɇ",
  f: "₣",
  g: "₲",
  h: "Ⱨ",
  i: "ł",
  j: "J",
  k: "₭",
  l: "Ⱡ",
  m: "₥",
  n: "₦",
  o: "Ø",
  p: "₱",
  q: "Q",
  r: "Ɽ",
  s: "₴",
  t: "₮",
  u: "Ʉ",
  v: "V",
  w: "₩",
  x: "Ӿ",
  y: "Ɏ",
  z: "Ⱬ",
  A: "₳",
  B: "฿",
  C: "₵",
  D: "Đ",
  E: "Ɇ",
  F: "₣",
  G: "₲",
  H: "Ⱨ",
  I: "ł",
  J: "J",
  K: "₭",
  L: "Ⱡ",
  M: "₥",
  N: "₦",
  O: "Ø",
  P: "₱",
  Q: "Q",
  R: "Ɽ",
  S: "₴",
  T: "₮",
  U: "Ʉ",
  V: "V",
  W: "₩",
  X: "Ӿ",
  Y: "Ɏ",
  Z: "Ⱬ",
};
const symbolsCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "å",
  b: "ß",
  c: "¢",
  d: "Ð",
  e: "ê",
  f: "£",
  g: "g",
  h: "h",
  i: "ï",
  j: "j",
  k: "k",
  l: "l",
  m: "m",
  n: "ñ",
  o: "ð",
  p: "þ",
  q: "q",
  r: "r",
  s: "§",
  t: "†",
  u: "µ",
  v: "v",
  w: "w",
  x: "x",
  y: "¥",
  z: "z",
  A: "Ä",
  B: "ß",
  C: "Ç",
  D: "Ð",
  E: "È",
  F: "£",
  G: "G",
  H: "H",
  I: "Ì",
  J: "J",
  K: "K",
  L: "L",
  M: "M",
  N: "ñ",
  O: "Ö",
  P: "þ",
  Q: "Q",
  R: "R",
  S: "§",
  T: "†",
  U: "Ú",
  V: "V",
  W: "W",
  X: "×",
  Y: "¥",
  Z: "Z",
};
const greekCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "α",
  b: "в",
  c: "¢",
  d: "∂",
  e: "є",
  f: "ƒ",
  g: "g",
  h: "н",
  i: "ι",
  j: "נ",
  k: "к",
  l: "ℓ",
  m: "м",
  n: "η",
  o: "σ",
  p: "ρ",
  q: "q",
  r: "я",
  s: "ѕ",
  t: "т",
  u: "υ",
  v: "ν",
  w: "ω",
  x: "χ",
  y: "у",
  z: "z",
  A: "α",
  B: "в",
  C: "¢",
  D: "∂",
  E: "є",
  F: "ƒ",
  G: "g",
  H: "н",
  I: "ι",
  J: "נ",
  K: "к",
  L: "ℓ",
  M: "м",
  N: "η",
  O: "σ",
  P: "ρ",
  Q: "q",
  R: "я",
  S: "ѕ",
  T: "т",
  U: "υ",
  V: "ν",
  W: "ω",
  X: "χ",
  Y: "у",
  Z: "z",
};
const bentTextCharMap = {
  0: "⊘",
  1: "𝟙",
  2: "ϩ",
  3: "Ӡ",
  4: "५",
  5: "Ƽ",
  6: "Ϭ",
  7: "7",
  8: "𝟠",
  9: "९",
  a: "ą",
  b: "ҍ",
  c: "ç",
  d: "ժ",
  e: "ҽ",
  f: "ƒ",
  g: "ց",
  h: "հ",
  i: "ì",
  j: "ʝ",
  k: "ҟ",
  l: "Ӏ",
  m: "ʍ",
  n: "ղ",
  o: "օ",
  p: "ք",
  q: "զ",
  r: "ɾ",
  s: "ʂ",
  t: "է",
  u: "մ",
  v: "ѵ",
  w: "ա",
  x: "×",
  y: "վ",
  z: "Հ",
  A: "Ⱥ",
  B: "β",
  C: "↻",
  D: "Ꭰ",
  E: "Ɛ",
  F: "Ƒ",
  G: "Ɠ",
  H: "Ƕ",
  I: "į",
  J: "ل",
  K: "Ҡ",
  L: "Ꝉ",
  M: "Ɱ",
  N: "ហ",
  O: "ට",
  P: "φ",
  Q: "Ҩ",
  R: "འ",
  S: "Ϛ",
  T: "Ͳ",
  U: "Ա",
  V: "Ỽ",
  W: "చ",
  X: "ჯ",
  Y: "Ӌ",
  Z: "ɀ",
};
const upperAnglesCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "Λ",
  b: "B",
  c: "ᄃ",
  d: "D",
  e: "Σ",
  f: "F",
  g: "G",
  h: "Ή",
  i: "I",
  j: "J",
  k: "K",
  l: "ᄂ",
  m: "M",
  n: "П",
  o: "Ө",
  p: "P",
  q: "Q",
  r: "Я",
  s: "Ƨ",
  t: "Ƭ",
  u: "Ц",
  v: "V",
  w: "Щ",
  x: "X",
  y: "Y",
  z: "Z",
  A: "Λ",
  B: "B",
  C: "ᄃ",
  D: "D",
  E: "Σ",
  F: "F",
  G: "G",
  H: "Ή",
  I: "I",
  J: "J",
  K: "K",
  L: "ᄂ",
  M: "M",
  N: "П",
  O: "Ө",
  P: "P",
  Q: "Q",
  R: "Я",
  S: "Ƨ",
  T: "Ƭ",
  U: "Ц",
  V: "V",
  W: "Щ",
  X: "X",
  Y: "Y",
  Z: "Z",
};
const subscriptCharMap = {
  0: "₀",
  1: "₁",
  2: "₂",
  3: "₃",
  4: "₄",
  5: "₅",
  6: "₆",
  7: "₇",
  8: "₈",
  9: "₉",
  a: "ₐ",
  b: "b",
  c: "c",
  d: "d",
  e: "ₑ",
  f: "f",
  g: "g",
  h: "ₕ",
  i: "ᵢ",
  j: "ⱼ",
  k: "ₖ",
  l: "ₗ",
  m: "ₘ",
  n: "ₙ",
  o: "ₒ",
  p: "ₚ",
  q: "q",
  r: "ᵣ",
  s: "ₛ",
  t: "ₜ",
  u: "ᵤ",
  v: "ᵥ",
  w: "w",
  x: "ₓ",
  y: "y",
  z: "z",
  A: "ₐ",
  B: "B",
  C: "C",
  D: "D",
  E: "ₑ",
  F: "F",
  G: "G",
  H: "ₕ",
  I: "ᵢ",
  J: "ⱼ",
  K: "ₖ",
  L: "ₗ",
  M: "ₘ",
  N: "ₙ",
  O: "ₒ",
  P: "ₚ",
  Q: "Q",
  R: "ᵣ",
  S: "ₛ",
  T: "ₜ",
  U: "ᵤ",
  V: "ᵥ",
  W: "W",
  X: "ₓ",
  Y: "Y",
  Z: "Z",
  "+": "₊",
  "-": "₋",
  "=": "₌",
  "(": "₍",
  ")": "₎",
};
const superscriptCharMap = {
  0: "⁰",
  1: "¹",
  2: "²",
  3: "³",
  4: "⁴",
  5: "⁵",
  6: "⁶",
  7: "⁷",
  8: "⁸",
  9: "⁹",
  a: "ᵃ",
  b: "ᵇ",
  c: "ᶜ",
  d: "ᵈ",
  e: "ᵉ",
  f: "ᶠ",
  g: "ᵍ",
  h: "ʰ",
  i: "ⁱ",
  j: "ʲ",
  k: "ᵏ",
  l: "ˡ",
  m: "ᵐ",
  n: "ⁿ",
  o: "ᵒ",
  p: "ᵖ",
  q: "q",
  r: "ʳ",
  s: "ˢ",
  t: "ᵗ",
  u: "ᵘ",
  v: "ᵛ",
  w: "ʷ",
  x: "ˣ",
  y: "ʸ",
  z: "ᶻ",
  A: "ᴬ",
  B: "ᴮ",
  C: "ᶜ",
  D: "ᴰ",
  E: "ᴱ",
  F: "ᶠ",
  G: "ᴳ",
  H: "ᴴ",
  I: "ᴵ",
  J: "ᴶ",
  K: "ᴷ",
  L: "ᴸ",
  M: "ᴹ",
  N: "ᴺ",
  O: "ᴼ",
  P: "ᴾ",
  Q: "Q",
  R: "ᴿ",
  S: "ˢ",
  T: "ᵀ",
  U: "ᵁ",
  V: "ⱽ",
  W: "ᵂ",
  X: "ˣ",
  Y: "ʸ",
  Z: "ᶻ",
  "+": "⁺",
  "-": "⁻",
  "=": "⁼",
  "(": "⁽",
  ")": "⁾",
};
const squiggleCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "ค",
  b: "๒",
  c: "ς",
  d: "๔",
  e: "є",
  f: "Ŧ",
  g: "ﻮ",
  h: "ђ",
  i: "เ",
  j: "ן",
  k: "к",
  l: "ɭ",
  m: "๓",
  n: "ภ",
  o: "๏",
  p: "ק",
  q: "ợ",
  r: "г",
  s: "ร",
  t: "Շ",
  u: "ย",
  v: "ש",
  w: "ฬ",
  x: "א",
  y: "ץ",
  z: "չ",
  A: "ค",
  B: "๒",
  C: "ς",
  D: "๔",
  E: "є",
  F: "Ŧ",
  G: "ﻮ",
  H: "ђ",
  I: "เ",
  J: "ן",
  K: "к",
  L: "ɭ",
  M: "๓",
  N: "ภ",
  O: "๏",
  P: "ק",
  Q: "ợ",
  R: "г",
  S: "ร",
  T: "Շ",
  U: "ย",
  V: "ש",
  W: "ฬ",
  X: "א",
  Y: "ץ",
  Z: "չ",
};
const doubleStruckCharMap = {
  0: "𝟘",
  1: "𝟙",
  2: "𝟚",
  3: "𝟛",
  4: "𝟜",
  5: "𝟝",
  6: "𝟞",
  7: "𝟟",
  8: "𝟠",
  9: "𝟡",
  a: "𝕒",
  b: "𝕓",
  c: "𝕔",
  d: "𝕕",
  e: "𝕖",
  f: "𝕗",
  g: "𝕘",
  h: "𝕙",
  i: "𝕚",
  j: "𝕛",
  k: "𝕜",
  l: "𝕝",
  m: "𝕞",
  n: "𝕟",
  o: "𝕠",
  p: "𝕡",
  q: "𝕢",
  r: "𝕣",
  s: "𝕤",
  t: "𝕥",
  u: "𝕦",
  v: "𝕧",
  w: "𝕨",
  x: "𝕩",
  y: "𝕪",
  z: "𝕫",
  A: "𝔸",
  B: "𝔹",
  C: "ℂ",
  D: "𝔻",
  E: "𝔼",
  F: "𝔽",
  G: "𝔾",
  H: "ℍ",
  I: "𝕀",
  J: "𝕁",
  K: "𝕂",
  L: "𝕃",
  M: "𝕄",
  N: "ℕ",
  O: "𝕆",
  P: "ℙ",
  Q: "ℚ",
  R: "ℝ",
  S: "𝕊",
  T: "𝕋",
  U: "𝕌",
  V: "𝕍",
  W: "𝕎",
  X: "𝕏",
  Y: "𝕐",
  Z: "ℤ",
};
const medievalCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "𝖆",
  b: "𝖇",
  c: "𝖈",
  d: "𝖉",
  e: "𝖊",
  f: "𝖋",
  g: "𝖌",
  h: "𝖍",
  i: "𝖎",
  j: "𝖏",
  k: "𝖐",
  l: "𝖑",
  m: "𝖒",
  n: "𝖓",
  o: "𝖔",
  p: "𝖕",
  q: "𝖖",
  r: "𝖗",
  s: "𝖘",
  t: "𝖙",
  u: "𝖚",
  v: "𝖛",
  w: "𝖜",
  x: "𝖝",
  y: "𝖞",
  z: "𝖟",
  A: "𝕬",
  B: "𝕭",
  C: "𝕮",
  D: "𝕯",
  E: "𝕰",
  F: "𝕱",
  G: "𝕲",
  H: "𝕳",
  I: "𝕴",
  J: "𝕵",
  K: "𝕶",
  L: "𝕷",
  M: "𝕸",
  N: "𝕹",
  O: "𝕺",
  P: "𝕻",
  Q: "𝕼",
  R: "𝕽",
  S: "𝕾",
  T: "𝕿",
  U: "𝖀",
  V: "𝖁",
  W: "𝖂",
  X: "𝖃",
  Y: "𝖄",
  Z: "𝖅",
};
const invertedSquaresCharMap = {
  q: "🆀",
  w: "🆆",
  e: "🅴",
  r: "🆁",
  t: "🆃",
  y: "🆈",
  u: "🆄",
  i: "🅸",
  o: "🅾",
  p: "🅿",
  a: "🅰",
  s: "🆂",
  d: "🅳",
  f: "🅵",
  g: "🅶",
  h: "🅷",
  j: "🅹",
  k: "🅺",
  l: "🅻",
  z: "🆉",
  x: "🆇",
  c: "🅲",
  v: "🆅",
  b: "🅱",
  n: "🅽",
  m: "🅼",
};
const cursiveCharMap = {
  0: "0",
  1: "1",
  2: "2",
  3: "3",
  4: "4",
  5: "5",
  6: "6",
  7: "7",
  8: "8",
  9: "9",
  a: "𝓪",
  b: "𝓫",
  c: "𝓬",
  d: "𝓭",
  e: "𝓮",
  f: "𝓯",
  g: "𝓰",
  h: "𝓱",
  i: "𝓲",
  j: "𝓳",
  k: "𝓴",
  l: "𝓵",
  m: "𝓶",
  n: "𝓷",
  o: "𝓸",
  p: "𝓹",
  q: "𝓺",
  r: "𝓻",
  s: "𝓼",
  t: "𝓽",
  u: "𝓾",
  v: "𝓿",
  w: "𝔀",
  x: "𝔁",
  y: "𝔂",
  z: "𝔃",
  A: "𝓐",
  B: "𝓑",
  C: "𝓒",
  D: "𝓓",
  E: "𝓔",
  F: "𝓕",
  G: "𝓖",
  H: "𝓗",
  I: "𝓘",
  J: "𝓙",
  K: "𝓚",
  L: "𝓛",
  M: "𝓜",
  N: "𝓝",
  O: "𝓞",
  P: "𝓟",
  Q: "𝓠",
  R: "𝓡",
  S: "𝓢",
  T: "𝓣",
  U: "𝓤",
  V: "𝓥",
  W: "𝓦",
  X: "𝓧",
  Y: "𝓨",
  Z: "𝓩",
};
const oldEnglishCharMap = {
  a: "𝔞",
  b: "𝔟",
  c: "𝔠",
  d: "𝔡",
  e: "𝔢",
  f: "𝔣",
  g: "𝔤",
  h: "𝔥",
  i: "𝔦",
  j: "𝔧",
  k: "𝔨",
  l: "𝔩",
  m: "𝔪",
  n: "𝔫",
  o: "𝔬",
  p: "𝔭",
  q: "𝔮",
  r: "𝔯",
  s: "𝔰",
  t: "𝔱",
  u: "𝔲",
  v: "𝔳",
  w: "𝔴",
  x: "𝔵",
  y: "𝔶",
  z: "𝔷",
  A: "𝔄",
  B: "𝔅",
  C: "ℭ",
  D: "𝔇",
  E: "𝔈",
  F: "𝔉",
  G: "𝔊",
  H: "ℌ",
  I: "ℑ",
  J: "𝔍",
  K: "𝔎",
  L: "𝔏",
  M: "𝔐",
  N: "𝔑",
  O: "𝔒",
  P: "𝔓",
  Q: "𝔔",
  R: "ℜ",
  S: "𝔖",
  T: "𝔗",
  U: "𝔘",
  V: "𝔙",
  W: "𝔚",
  X: "𝔛",
  Y: "𝔜",
  Z: "ℨ",
};
const wideTextCharMap = {
  "`": "`",
  1: "１",
  2: "２",
  3: "３",
  4: "４",
  5: "５",
  6: "６",
  7: "７",
  8: "８",
  9: "９",
  0: "０",
  "-": "－",
  "=": "＝",
  "~": "~",
  "!": "！",
  "@": "＠",
  "#": "＃",
  $: "＄",
  "%": "％",
  "^": "^",
  "&": "＆",
  "*": "＊",
  "(": "（",
  ")": "）",
  _: "_",
  "+": "＋",
  q: "ｑ",
  w: "ｗ",
  e: "ｅ",
  r: "ｒ",
  t: "ｔ",
  y: "ｙ",
  u: "ｕ",
  i: "ｉ",
  o: "ｏ",
  p: "ｐ",
  "[": "[",
  "]": "]",
  "\\": "\\",
  Q: "Ｑ",
  W: "Ｗ",
  E: "Ｅ",
  R: "Ｒ",
  T: "Ｔ",
  Y: "Ｙ",
  U: "Ｕ",
  I: "Ｉ",
  O: "Ｏ",
  P: "Ｐ",
  "{": "{",
  "}": "}",
  "|": "|",
  a: "ａ",
  s: "ｓ",
  d: "ｄ",
  f: "ｆ",
  g: "ｇ",
  h: "ｈ",
  j: "ｊ",
  k: "ｋ",
  l: "ｌ",
  ";": "；",
  "'": "＇",
  A: "Ａ",
  S: "Ｓ",
  D: "Ｄ",
  F: "Ｆ",
  G: "Ｇ",
  H: "Ｈ",
  J: "Ｊ",
  K: "Ｋ",
  L: "Ｌ",
  ":": "：",
  '"': '"',
  z: "ｚ",
  x: "ｘ",
  c: "ｃ",
  v: "ｖ",
  b: "ｂ",
  n: "ｎ",
  m: "ｍ",
  ",": "，",
  ".": "．",
  "/": "／",
  Z: "Ｚ",
  X: "Ｘ",
  C: "Ｃ",
  V: "Ｖ",
  B: "Ｂ",
  N: "Ｎ",
  M: "Ｍ",
  "<": "<",
  ">": ">",
  "?": "？",
};

// Lunicode.js
// from lunicode.com
// on GitHub: https://github.com/combatwombat/Lunicode.js
// Copyright © 2012 Robert Gerlach - robsite.net
function Lunicode() {
  this.tools = {
    flip: {
      init: function () {
        for (i in this.map) this.map[this.map[i]] = i;
      },
      encode: function (i) {
        for (var r, t = [], o = 0, h = i.length; h > o; o++)
          (r = i.charAt(o)),
            o > 0 && ("̤" == r || "̗" == r || "̖" == r || "̮" == r)
              ? ((r = this.map[i.charAt(o - 1) + r]), t.pop())
              : ((r = this.map[r]),
                "undefined" == typeof r && (r = i.charAt(o))),
            t.push(r);
        return t.reverse().join("");
      },
      decode: function (i) {
        for (var r, t = [], o = 0, h = i.length; h > o; o++)
          (r = i.charAt(o)),
            o > 0 && ("̤" == r || "̗" == r || "̖" == r || "̮" == r)
              ? ((r = this.map[i.charAt(o - 1) + r]), t.pop())
              : ((r = this.map[r]),
                "undefined" == typeof r && (r = i.charAt(o))),
            t.push(r);
        return t.reverse().join("");
      },
      map: {
        a: "ɐ",
        b: "q",
        c: "ɔ",
        d: "p",
        e: "ǝ",
        f: "ɟ",
        g: "ɓ",
        h: "ɥ",
        i: "ı",
        j: "ɾ",
        k: "ʞ",
        l: "l",
        m: "ɯ",
        n: "u",
        r: "ɹ",
        t: "ʇ",
        v: "ʌ",
        w: "ʍ",
        y: "ʎ",
        A: "∀",
        B: "ᙠ",
        C: "Ɔ",
        D: "ᗡ",
        E: "Ǝ",
        F: "Ⅎ",
        G: "⅁",
        J: "ſ",
        K: "⋊",
        L: "˥",
        M: "W",
        P: "Ԁ",
        Q: "Ό",
        R: "ᴚ",
        T: "⊥",
        U: "∩",
        V: "Λ",
        Y: "⅄",
        1: "⇂",
        2: "ᄅ",
        3: "Ɛ",
        4: "ㄣ",
        5: "ގ",
        6: "9",
        7: "ㄥ",
        "&": "⅋",
        ".": "˙",
        '"': "„",
        ";": "؛",
        "[": "]",
        "(": ")",
        "{": "}",
        "?": "¿",
        "!": "¡",
        "'": ",",
        "<": ">",
        "‾": "_",
        "¯": "_",
        "‿": "⁀",
        "⁅": "⁆",
        "∴": "∵",
        "\r": "\n",
        ß: "ᙠ",
        "̈": "̤",
        ä: "ɐ̤",
        ö: "o̤",
        ü: "n̤",
        Ä: "∀̤",
        Ö: "O̤",
        Ü: "∩̤",
        "´": " ̗",
        é: "ǝ̗",
        á: "ɐ̗",
        ó: "o̗",
        ú: "n̗",
        É: "Ǝ̗",
        Á: "∀̗",
        Ó: "O̗",
        Ú: "∩̗",
        "`": " ̖",
        è: "ǝ̖",
        à: "ɐ̖",
        ò: "o̖",
        ù: "n̖",
        È: "Ǝ̖",
        À: "∀̖",
        Ò: "O̖",
        Ù: "∩̖",
        "^": " ̮",
        ê: "ǝ̮",
        â: "ɐ̮",
        ô: "o̮",
        û: "n̮",
        Ê: "Ǝ̮",
        Â: "∀̮",
        Ô: "O̮",
        Û: "∩̮",
      },
    },
    mirror: {
      init: function () {
        for (i in this.map) this.map[this.map[i]] = i;
      },
      encode: function (i) {
        for (var r, t = [], o = [], h = 0, n = i.length; n > h; h++)
          (r = i.charAt(h)),
            h > 0 && ("̈" == r || "̀" == r || "́" == r || "̂" == r)
              ? ((r = this.map[i.charAt(h - 1) + r]), t.pop())
              : ((r = this.map[r]),
                "undefined" == typeof r && (r = i.charAt(h))),
            "\n" == r ? (o.push(t.reverse().join("")), (t = [])) : t.push(r);
        return o.push(t.reverse().join("")), o.join("\n");
      },
      decode: function (i) {
        for (var r, t = [], o = [], h = 0, n = i.length; n > h; h++)
          (r = i.charAt(h)),
            h > 0 && ("̈" == r || "̀" == r || "́" == r || "̂" == r)
              ? ((r = this.map[i.charAt(h - 1) + r]), t.pop())
              : ((r = this.map[r]),
                "undefined" == typeof r && (r = i.charAt(h))),
            "\n" == r ? (o.push(t.reverse().join("")), (t = [])) : t.push(r);
        return o.push(t.reverse().join("")), o.join("\n");
      },
      map: {
        a: "ɒ",
        b: "d",
        c: "ɔ",
        e: "ɘ",
        f: "Ꮈ",
        g: "ǫ",
        h: "ʜ",
        j: "ꞁ",
        k: "ʞ",
        l: "|",
        n: "ᴎ",
        p: "q",
        r: "ɿ",
        s: "ꙅ",
        t: "ƚ",
        y: "ʏ",
        z: "ƹ",
        B: "ᙠ",
        C: "Ɔ",
        D: "ᗡ",
        E: "Ǝ",
        F: "ꟻ",
        G: "Ꭾ",
        J: "Ⴑ",
        K: "⋊",
        L: "⅃",
        N: "Ͷ",
        P: "ꟼ",
        Q: "Ọ",
        R: "Я",
        S: "Ꙅ",
        Z: "Ƹ",
        1: "",
        2: "",
        3: "",
        4: "",
        5: "",
        6: "",
        7: "",
        "&": "",
        ";": "",
        "[": "]",
        "(": ")",
        "{": "}",
        "?": "⸮",
        "<": ">",
        ä: "ɒ̈",
        ß: "ᙠ",
        "´": "`",
        é: "ɘ̀",
        á: "ɒ̀",
        ó: "ò",
        ú: "ù",
        É: "Ǝ̀",
        Á: "À",
        Ó: "Ò",
        Ú: "Ù",
        "`": "´",
        è: "ɘ́",
        à: "ɒ́",
        È: "Ǝ́",
        ê: "ɘ̂",
        â: "ɒ̂",
        Ê: "Ǝ̂",
        Ø: "ᴓ",
        ø: "ᴓ",
      },
    },
    creepify: {
      init: function () {
        for (var i = 768; 789 >= i; i++)
          this.diacriticsTop.push(String.fromCharCode(i));
        for (var i = 790; 819 >= i; i++)
          794 != i &&
            795 != i &&
            this.diacriticsBottom.push(String.fromCharCode(i));
        this.diacriticsTop.push(String.fromCharCode(794)),
          this.diacriticsTop.push(String.fromCharCode(795));
        for (var i = 820; 824 >= i; i++)
          this.diacriticsMiddle.push(String.fromCharCode(i));
        for (var i = 825; 828 >= i; i++)
          this.diacriticsBottom.push(String.fromCharCode(i));
        for (var i = 829; 836 >= i; i++)
          this.diacriticsTop.push(String.fromCharCode(i));
        this.diacriticsTop.push(String.fromCharCode(836)),
          this.diacriticsBottom.push(String.fromCharCode(837)),
          this.diacriticsTop.push(String.fromCharCode(838)),
          this.diacriticsBottom.push(String.fromCharCode(839)),
          this.diacriticsBottom.push(String.fromCharCode(840)),
          this.diacriticsBottom.push(String.fromCharCode(841)),
          this.diacriticsTop.push(String.fromCharCode(842)),
          this.diacriticsTop.push(String.fromCharCode(843)),
          this.diacriticsTop.push(String.fromCharCode(844)),
          this.diacriticsBottom.push(String.fromCharCode(845)),
          this.diacriticsBottom.push(String.fromCharCode(846)),
          this.diacriticsTop.push(String.fromCharCode(848)),
          this.diacriticsTop.push(String.fromCharCode(849)),
          this.diacriticsTop.push(String.fromCharCode(850)),
          this.diacriticsBottom.push(String.fromCharCode(851)),
          this.diacriticsBottom.push(String.fromCharCode(852)),
          this.diacriticsBottom.push(String.fromCharCode(853)),
          this.diacriticsBottom.push(String.fromCharCode(854)),
          this.diacriticsTop.push(String.fromCharCode(855)),
          this.diacriticsTop.push(String.fromCharCode(856)),
          this.diacriticsBottom.push(String.fromCharCode(857)),
          this.diacriticsBottom.push(String.fromCharCode(858)),
          this.diacriticsTop.push(String.fromCharCode(859)),
          this.diacriticsBottom.push(String.fromCharCode(860)),
          this.diacriticsTop.push(String.fromCharCode(861)),
          this.diacriticsTop.push(String.fromCharCode(861)),
          this.diacriticsBottom.push(String.fromCharCode(863)),
          this.diacriticsTop.push(String.fromCharCode(864)),
          this.diacriticsTop.push(String.fromCharCode(865));
      },
      encode: function (r) {
        var t,
          o = "";
        for (i in r) {
          if (
            ((t = r[i]),
            this.options.middle &&
              (t += this.diacriticsMiddle[
                Math.floor(Math.random() * this.diacriticsMiddle.length)
              ]),
            this.options.top)
          )
            for (
              var h = this.diacriticsTop.length - 1,
                n = 0,
                a =
                  this.options.maxHeight -
                  Math.random() *
                    ((this.options.randomization / 100) *
                      this.options.maxHeight);
              a > n;
              n++
            )
              t += this.diacriticsTop[Math.floor(Math.random() * h)];
          if (this.options.bottom)
            for (
              var s = this.diacriticsBottom.length - 1,
                n = 0,
                a =
                  this.options.maxHeight -
                  Math.random() *
                    ((this.options.randomization / 100) *
                      this.options.maxHeight);
              a > n;
              n++
            )
              t += this.diacriticsBottom[Math.floor(Math.random() * s)];
          o += t;
        }
        return o;
      },
      decode: function (r) {
        var t,
          o = "";
        for (i in r)
          (t = r[i].charCodeAt(0)), (768 > t || t > 865) && (o += r[i]);
        return o;
      },
      diacriticsTop: [],
      diacriticsMiddle: [],
      diacriticsBottom: [],
      options: {
        top: !0,
        middle: !0,
        bottom: !0,
        maxHeight: 15,
        randomization: 100,
      },
    },
    bubbles: {
      init: function () {
        for (var i = 49; 57 >= i; i++)
          this.map[String.fromCharCode(i)] = String.fromCharCode(i + 9263);
        this.map[0] = "⓪";
        for (var i = 65; 90 >= i; i++)
          this.map[String.fromCharCode(i)] = String.fromCharCode(i + 9333);
        for (var i = 97; 122 >= i; i++)
          this.map[String.fromCharCode(i)] = String.fromCharCode(i + 9327);
        for (i in this.map) this.mapInverse[this.map[i]] = i;
      },
      encode: function (r) {
        var t,
          o = "",
          h = !0;
        for (i in r)
          (t = this.map[r[i]]),
            "undefined" == typeof t &&
              (r[i].charCodeAt(0) >= 33
                ? ((t = r[i] + String.fromCharCode(8413)),
                  h ||
                    (t =
                      String.fromCharCode(8239) +
                      String.fromCharCode(160) +
                      String.fromCharCode(160) +
                      String.fromCharCode(8239) +
                      t))
                : (t = r[i])),
            (o += t),
            (h = "\n" == t);
        return o;
      },
      decode: function (r) {
        var t,
          o = "",
          h = "";
        for (i in r)
          (t = this.mapInverse[r[i]]),
            (o += "undefined" == typeof t ? r[i] : t);
        for (i in o)
          (t = o[i].charCodeAt(0)),
            160 != t && 8239 != t && 8413 != t && (h += o[i]);
        return h;
      },
      map: {},
      mapInverse: {},
    },
    squares: {
      init: function () {},
      encode: function (r) {
        var t,
          o = "",
          h = !0;
        for (i in r)
          r[i].charCodeAt(0) >= 33
            ? ((t = r[i] + String.fromCharCode(8414)),
              h ||
                (t =
                  String.fromCharCode(8239) +
                  String.fromCharCode(160) +
                  String.fromCharCode(160) +
                  String.fromCharCode(8239) +
                  t))
            : (t = r[i]),
            (o += t),
            (h = "\n" == t);
        return o;
      },
      decode: function (r) {
        var t,
          o = "";
        for (i in r)
          (t = r[i].charCodeAt(0)),
            160 != t && 8239 != t && 8414 != t && (o += r[i]);
        return o;
      },
    },
    roundsquares: {
      init: function () {},
      encode: function (r) {
        var t,
          o = "",
          h = !0;
        for (i in r)
          r[i].charCodeAt(0) >= 33
            ? ((t = r[i] + String.fromCharCode(8419)),
              h ||
                (t =
                  String.fromCharCode(160) +
                  String.fromCharCode(160) +
                  String.fromCharCode(160) +
                  t))
            : (t = r[i]),
            (o += t),
            (h = "\n" == t);
        return o;
      },
      decode: function (r) {
        var t,
          o = "";
        for (i in r)
          (t = r[i].charCodeAt(0)),
            160 != t && 8239 != t && 8419 != t && (o += r[i]);
        return o;
      },
    },
    bent: {
      init: function () {
        for (i in this.map) this.map[this.map[i]] = i;
      },
      encode: function (i) {
        for (var r, t = "", o = 0, h = i.length; h > o; o++)
          (r = this.map[i.charAt(o)]),
            "undefined" == typeof r && (r = i.charAt(o)),
            (t += r);
        return t;
      },
      decode: function (i) {
        for (var r, t = "", o = 0, h = i.length; h > o; o++)
          (r = this.map[i.charAt(o)]),
            "undefined" == typeof r && (r = i.charAt(o)),
            (t += r);
        return t;
      },
      map: {
        a: "ą",
        b: "ҍ",
        c: "ç",
        d: "ժ",
        e: "ҽ",
        f: "ƒ",
        g: "ց",
        h: "հ",
        i: "ì",
        j: "ʝ",
        k: "ҟ",
        l: "Ӏ",
        m: "ʍ",
        n: "ղ",
        o: "օ",
        p: "ք",
        q: "զ",
        r: "ɾ",
        s: "ʂ",
        t: "է",
        u: "մ",
        v: "ѵ",
        w: "ա",
        x: "×",
        y: "վ",
        z: "Հ",
        A: "Ⱥ",
        B: "β",
        C: "↻",
        D: "Ꭰ",
        E: "Ɛ",
        F: "Ƒ",
        G: "Ɠ",
        H: "Ƕ",
        I: "į",
        J: "ل",
        K: "Ҡ",
        L: "Ꝉ",
        M: "Ɱ",
        N: "ហ",
        O: "ට",
        P: "φ",
        Q: "Ҩ",
        R: "འ",
        S: "Ϛ",
        T: "Ͳ",
        U: "Ա",
        V: "Ỽ",
        W: "చ",
        X: "ჯ",
        Y: "Ӌ",
        Z: "ɀ",
        0: "⊘",
        1: "������",
        2: "ϩ",
        3: "Ӡ",
        4: "५",
        5: "Ƽ",
        6: "Ϭ",
        7: "7",
        8: "������",
        9: "९",
        "&": "⅋",
        "(": "{",
        ")": "}",
        "{": "(",
        "}": ")",
        ä: "ą̈",
        ö: "օ̈",
        ü: "մ̈",
        Ä: "Ⱥ̈",
        Ö: "ට̈",
        Ü: "Ա̈",
        é: "ҽ́",
        á: "ą́",
        ó: "օ́",
        ú: "մ́",
        É: "Ɛ́",
        Á: "Ⱥ́",
        Ó: "ට́",
        Ú: "Ա́",
        è: "ҽ̀",
        à: "ą̀",
        ò: "օ̀",
        ù: "մ̀",
        È: "Ɛ̀",
        À: "Ⱥ̀",
        Ò: "ට̀",
        Ù: "Ա̀",
        ê: "ҽ̂",
        â: "ą̂",
        ô: "օ̂",
        û: "մ̂",
        Ê: "Ɛ̂",
        Â: "Ⱥ̂",
        Ô: "ට̂",
        Û: "Ա̂",
      },
    },
    tiny: {
      init: function () {
        for (i in this.map) this.map[this.map[i]] = i;
      },
      encode: function (i) {
        var r,
          t = "";
        i = i.toUpperCase();
        for (var o = 0, h = i.length; h > o; o++)
          (r = this.map[i.charAt(o)]),
            "undefined" == typeof r && (r = i.charAt(o)),
            (t += r);
        return t;
      },
      decode: function (i) {
        for (var r, t = "", o = 0, h = i.length; h > o; o++)
          (r = this.map[i.charAt(o)]),
            "undefined" == typeof r && (r = i.charAt(o)),
            (t += r);
        return t;
      },
      map: {
        A: "ᴀ",
        B: "ʙ",
        C: "ᴄ",
        D: "ᴅ",
        E: "ᴇ",
        F: "ꜰ",
        G: "ɢ",
        H: "ʜ",
        I: "ɪ",
        J: "ᴊ",
        K: "ᴋ",
        L: "ʟ",
        M: "ᴍ",
        N: "ɴ",
        O: "ᴏ",
        P: "ᴘ",
        Q: "Q",
        R: "ʀ",
        S: "ꜱ",
        T: "ᴛ",
        U: "ᴜ",
        V: "ᴠ",
        W: "ᴡ",
        X: "x",
        Y: "ʏ",
        Z: "ᴢ",
      },
    },
  };
  for (i in this.tools) this.tools[i].init();
  this.getHTML = function (i) {
    for (var r, t = "", o = !0, h = 0, n = 0, a = 0, s = i.length; s > a; a++)
      (r = i.charCodeAt(a)),
        10 == r || 13 == r
          ? ((t += "<br>\n"), (o = !0))
          : 32 == r
          ? o
            ? ((t += " "), (o = !1))
            : ((t += " "), (o = !0))
          : (r >= 55296 && 56319 >= r
              ? ((h = r), (n = 0))
              : h > 0
              ? (r >= 56320 &&
                  57343 >= r &&
                  (n = 1024 * (h - 55296) + (r - 56320) + 65536),
                (h = 0))
              : (n = r),
            0 != n && ((t += "&#x" + n.toString(16) + ";"), (o = !0)));
    return t;
  };
}

// CUTE TEXT:
function cuteText(text) {
  if (text.trim() === "") return "";
  qi = -1;
  var bounds = boundingString(Math.floor(Math.random() * 2) + 1);
  return (
    bounds +
    "  🎀  " +
    text
      .split(/([!?.]+)/gi)
      .map(cuteSentence)
      .join("") +
    "  🎀  " +
    esrever.reverse(bounds)
  );
}
function cuteSentence(sentence) {
  return sentence
    .split(/([\s,]+)/gi)
    .map(cuteWord)
    .join("");
}
function cuteWord(word) {
  //remember to handle exclamations, empty strings, commas etc. etc.!!
  if (word === "" || /[[!?.\s,]+]/gi.test(word)) return word;
  //TODO: random turn o's into flowers, turn quotes into unicode and ! and ?
  word = roundReplace(word);
  word = punctReplace(word);
  word = emojiReplace(word);
  return scriptify(word);
}
var qi = -1;
var qa = ["❝", "❞"];
function quotes() {
  qi++;
  if (qi === 2) qi = 0;
  return qa[qi];
}
function punctReplace(word) {
  return word
    .split("")
    .map(function (a) {
      if (a === "!") return randomElement(["❣", "❢"]);
      else if (a === "?") return randomElement(["¿", "?"]);
      else if (a === '"') return quotes();
      else return a;
    })
    .join("");
}
function emojiReplace(word) {
  return word
    .replace(":)", randomElement(emoji[":)"]))
    .replace("(:", randomElement(emoji[":)"]))
    .replace("^^", randomElement(emoji["^^"]))
    .replace(":P", randomElement(emoji[":p"]))
    .replace(":p", randomElement(emoji[":p"]))
    .replace(":D", randomElement(emoji[":D"]))
    .replace("<3", randomElement(emoji["<3"]))
    .replace("(y)", randomElement(emoji["(y)"]))
    .replace("(Y)", randomElement(emoji["(y)"]));
}
function roundReplace(text) {
  return text
    .split("")
    .map(function (a) {
      if (a.toLowerCase() === "o" || a === "0") {
        return randomElement(round);
      } else {
        return a;
      }
    })
    .join("");
}
var emoji = {
  ":)": [
    "٩(˘◡˘)۶",
    "(•◡•)",
    "(ɔ◔‿◔)ɔ",
    "❀◕‿◕❀",
    "(｡◕‿◕｡)",
    "●‿●",
    "◕‿◕",
    "😍",
    "ツ",
    "(✿ヘᴥヘ)",
    "🌘‿🌘",
    "(づ｡◕‿‿◕｡)づ",
    "(/◔◡◔)/",
    "s(^‿^)-b",
    "(人◕‿◕)",
    "(✿╹◡╹)",
    "◔◡◔",
  ],
  "^^": [
    "(^▽^)",
    "(✿^▽^)",
    "ᵔ⌣ᵔ",
    "ᵔᴥᵔ",
    "(≧◡≦)",
    "^ㅅ^",
    "^ㅂ^",
    "(⌒‿⌒)",
    "◠◡◠",
    "⁀‿⁀",
    "",
  ],
  ":p": [":Þ", ""],
  ":D": ["(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧", "(✿◕ᗜ◕)━♫.*･｡ﾟ", "ᕕ(ᐛ)ᕗ"],
  "<3": [
    "♡",
    "❤",
    "♥",
    "❥",
    "💘",
    "💙",
    "💗",
    "💖",
    "💕",
    "💓",
    "💞",
    "💝",
    "💟",
  ],
  "(y)": ["👍", "👌"],
};
var round = [
  "❁",
  "🌺",
  "❀",
  "💮",
  "🏵",
  "🌸",
  "☯",
  "😍",
  "♡",
  "🍩",
  "🍬",
  "💙",
  "🌞",
  "💍",
  "🍪",
  "❤",
  "💗",
  "🍑",
  "💞",
];
var food = [
  "🍬",
  "🍭",
  "🍒",
  "🍎",
  "🍉",
  "🍇",
  "🍓",
  "🍌",
  "🍑",
  "🍰",
  "🎂",
  "🍩",
  "🍪",
  "🍧",
  "🍦",
  "🍫",
  "🍡",
];
var flowers = [
  "✿",
  "⚘",
  "❦",
  "❧",
  "✾",
  "❁",
  "❀",
  "💐",
  "🌸",
  "💮",
  "🏵",
  "🌹",
  "🌺",
  "🌻",
  "🌷",
  "☘",
  "🌱",
  "🌲",
  "🌳",
  "🌴",
  "🌿",
  "🍂",
];
var twinkles = [
  "⚛",
  "🌌",
  "🌠",
  "*",
  ":",
  "｡",
  "･ﾟ",
  "✧",
  "✮",
  "★",
  "✩",
  "⋆",
  ".",
  "°",
  "`",
  "✴",
  "｡",
  "✴",
  "⋆",
  "✳",
  "✶",
  "✷",
  "❈",
];
var animals = [
  "🐯",
  "🐎",
  "🐖",
  "🐷",
  "🐏",
  "🐑",
  "🐐",
  "🐫",
  "🐘",
  "🐭",
  "🐁",
  "🐀",
  "🐹",
  "🐰",
  "🐇",
  "🐿",
  "🐻",
  "🐨",
  "🐼",
  "🐾",
  "🐔",
  "🐓",
  "🐣",
  "🐤",
  "🐥",
  "🐦",
  "🐧",
  "🕊",
  "🐸",
  "🐢",
  "🐳",
  "🐋",
  "🐬",
  "🐟",
  "🐠",
  "🐡",
  "🐙",
  "🐚",
  "🐌",
  "🐞",
];
var plants = [
  "✿",
  "⚘",
  "❦",
  "❧",
  "✾",
  "❁",
  "❀",
  "💐",
  "🌸",
  "💮",
  "🏵",
  "🌹",
  "🌺",
  "🌻",
  "🌷",
  "☘",
  "🌱",
  "🌲",
  "🌳",
  "🌴",
  "🌿",
  "🍂",
];
var misc = [
  "🌌",
  "🌠",
  "🎉",
  "🎊",
  "🎈",
  "💌",
  "🎎",
  "🎁",
  "🎀",
  "🕯",
  "🔮",
  "🛀",
  "🎖",
  "🏆",
  "🏅",
  "👑",
  "💍",
  "👶",
  "👼",
  "👸",
  "👯",
  "👒",
  "👻",
];
var music = ["♫", "♬", "♪", "♩", "°", "｡", "✧", "🎻", "🎺", "🎸", "🎷", "📯"];

var flourish = [
  "•?((¯°·._.• ",
  "ıllıllı ",
  "¸,ø¤º°`°º¤ø,¸¸,ø¤º° ",
  "°°°·.°·..·°¯°·._.· ",
  "•´¯`•. ",
  "×º°”˜`”°º× ",
  "•]••´º´•» ",
  "]|I{•------» ",
  "§.•´¨'°÷•..× ",
  "•°¯`•• ",
  "(¯`·.¸¸.·´¯`·.¸¸.-> ",
  "*´¯`*.¸¸.*´¯`* ",
  "(¯`·.¸¸.-> °º ",
  "°·.¸.·°¯°·.¸.·°¯°·.¸.-> ",
  "•._.••´¯``•.¸¸.•` ",
  "¸„.-•~¹°”ˆ˜¨ ",
  "(¯´•._.• ",
  "••¤(`×",
  "•´¯`•» ",
  "`•.,¸¸,.•´¯ ",
  "¸,ø¤º°`°º¤ø,¸ ",
  ".o0×X×0o. ",
  ",-*'^'~*-.,_,.-*~ ",
  "`•.¸¸.•´´¯`••._.• ",
  "—(••÷",
  "¤¸¸.•´¯`•¸¸.•..>> ",
  "••.•´¯`•.•• ",
  ".•°¤*(¯`★´¯)*¤° ",
  "๑۞๑,¸¸,ø¤º°`°๑۩ ",
  "-漫~*'¨¯¨'*·舞~ ",
  "★·.·´¯`·.·★ ",
  "▁ ▂ ▄ ▅ ▆ ▇ █ ",
  "▀▄▀▄▀▄ ",
  "▌│█║▌║▌║ ",
];

function boundingString(n) {
  return randomElement([
    foodString,
    twinkleString,
    animalString,
    flourishString,
  ])(n);
}
function foodString(n) {
  return new Array(n + 1)
    .join("0")
    .split("")
    .map(function (a) {
      return randomElement(food);
    })
    .join(" ⋆ ");
}
function twinkleString(n) {
  return new Array(n + 1)
    .join("0")
    .split("")
    .map(function () {
      return randomElement(twinkles);
    })
    .join("");
}
function animalString(n) {
  return new Array(n + 1)
    .join("0")
    .split("")
    .map(function (a) {
      return randomElement(animals);
    })
    .join(" ⋆ ");
}
function flourishString(n) {
  return randomElement(flourish);
}
function scriptify(text) {
  var map = {
    0: "𝟢",
    1: "𝟣",
    2: "𝟤",
    3: "𝟥",
    4: "𝟦",
    5: "𝟧",
    6: "𝟨",
    7: "𝟩",
    8: "𝟪",
    9: "𝟫",
    a: "𝒶",
    b: "𝒷",
    c: "𝒸",
    d: "𝒹",
    e: "𝑒",
    f: "𝒻",
    g: "𝑔",
    h: "𝒽",
    i: "𝒾",
    j: "𝒿",
    k: "𝓀",
    l: "𝓁",
    m: "𝓂",
    n: "𝓃",
    o: "𝑜",
    p: "𝓅",
    q: "𝓆",
    r: "𝓇",
    s: "𝓈",
    t: "𝓉",
    u: "𝓊",
    v: "𝓋",
    w: "𝓌",
    x: "𝓍",
    y: "𝓎",
    z: "𝓏",
    A: "𝒜",
    B: "𝐵",
    C: "𝒞",
    D: "𝒟",
    E: "𝐸",
    F: "𝐹",
    G: "𝒢",
    H: "𝐻",
    I: "𝐼",
    J: "𝒥",
    K: "𝒦",
    L: "𝐿",
    M: "𝑀",
    N: "𝒩",
    O: "𝒪",
    P: "𝒫",
    Q: "𝒬",
    R: "𝑅",
    S: "𝒮",
    T: "𝒯",
    U: "𝒰",
    V: "𝒱",
    W: "𝒲",
    X: "𝒳",
    Y: "𝒴",
    Z: "𝒵",
  };
  var charArray = text.split("");
  for (var i = 0; i < charArray.length; i++) {
    if (map[charArray[i].toLowerCase()]) {
      charArray[i] = map[charArray[i]];
    }
  }
  text = charArray.join("");
  return text;
}
function shuffleArray(array) {
  var currentIndex = array.length,
    temporaryValue,
    randomIndex;
  // While there remain elements to shuffle...
  while (0 !== currentIndex) {
    // Pick a remaining element...
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;
    // And swap it with the current element.
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }
  return array;
}
function randomElement(a) {
  return a[Math.floor(Math.random() * a.length)];
}
//https://github.com/mathiasbynens/esrever
!(function (e) {
  var o = "object" == typeof exports && exports,
    r = "object" == typeof module && module && module.exports == o && module,
    n = "object" == typeof global && global;
  (n.global === n || n.window === n) && (e = n);
  var t = /(<%= allExceptCombiningMarks %>)(<%= combiningMarks %>+)/g,
    i = /([\uD800-\uDBFF])([\uDC00-\uDFFF])/g,
    f = function (e) {
      e = e
        .replace(t, function (e, o, r) {
          return f(r) + o;
        })
        .replace(i, "$2$1");
      for (var o = "", r = e.length; r--; ) o += e.charAt(r);
      return o;
    },
    l = { version: "<%= version %>", reverse: f };
  if (
    "function" == typeof define &&
    "object" == typeof define.amd &&
    define.amd
  )
    define(function () {
      return l;
    });
  else if (o && !o.nodeType)
    if (r) r.exports = l;
    else for (var a in l) l.hasOwnProperty(a) && (o[a] = l[a]);
  else e.esrever = l;
})(this);

// CRAZY TEXT
function fullCrazy(text) {
  if (text.trim() === "") return "";
  return randomSymbols(2) + "  " + crazifyText(text) + "  " + randomSymbols(2);
}
function crazifyText(text) {
  text = text.split("");
  for (var i = 0; i < text.length; i++) {
    text[i] = crazifyCharacter(text[i]);
  }
  return text.join("");
}
function crazifyCharacter(c) {
  c = c.toLowerCase();
  var map = {
    "&": "⅋",
    "%": ["⅍", "℀", "℁", "℆", "℅"],
    0: ["０", "Ѳ", "ʘ"],
    1: ["➀", "❶", "１"],
    2: ["２", "❷", "➁"],
    3: ["３", "❸", "➂"],
    4: ["４", "❹", "➃"],
    5: ["❺", "➄", "５"],
    6: ["６", "❻", "➅"],
    7: ["７", "❼", "➆"],
    8: ["８", "➇", "❽"],
    9: ["➈", "❾", "９"],
    "<": [
      "≼",
      "≺",
      "≪",
      "☾",
      "≾",
      "⋜",
      "⋞",
      "⋐",
      "⊂",
      "⊏",
      "⊑",
      "《",
      "＜",
      "❮",
      "❰",
      "⫷",
    ],
    ">": "☽≫≻≽≿⋝⋟⋑⊃⊐⊒⫸》＞❯❱",
    "[": "【〖〘〚［",
    "]": "】〗〙〛］",
    "*": "✨✩✪✫✬✭✮✯✰✦✱✲✳✴✵✶✷֍֎✸✹✺✻✼✽✾✿❀❁❂❃❄★☆＊",
    a: [
      "Ⓐ",
      "ⓐ",
      "α",
      "Ａ",
      "ａ",
      "ᗩ",
      "卂",
      "Δ",
      "ค",
      "α",
      "ά",
      "Ã",
      "𝔞",
      "𝓪",
      "𝒶",
      "𝓐",
      "𝐀",
      "𝐚",
      "𝔸",
      "𝕒",
      "ᵃ",
    ],
    b: [
      "Ⓑ",
      "ⓑ",
      "в",
      "Ｂ",
      "乃",
      "ｂ",
      "ᗷ",
      "β",
      "๒",
      "в",
      "в",
      "β",
      "𝔟",
      "𝓫",
      "𝒷",
      "𝓑",
      "𝐁",
      "𝐛",
      "𝔹",
      "𝕓",
      "ᵇ",
    ],
    c: [
      "Ⓒ",
      "ⓒ",
      "匚",
      "¢",
      "Ｃ",
      "ｃ",
      "ᑕ",
      "Ć",
      "ς",
      "c",
      "ς",
      "Č",
      "℃",
      "𝔠",
      "𝓬",
      "𝒸",
      "𝓒",
      "𝐂",
      "𝐜",
      "ℂ",
      "𝕔",
      "ᶜ",
    ],
    d: [
      "Ⓓ",
      "ⓓ",
      "∂",
      "Ｄ",
      "ｄ",
      "ᗪ",
      "Đ",
      "๔",
      "∂",
      "đ",
      "Ď",
      "𝔡",
      "𝓭",
      "𝒹",
      "𝓓",
      "𝐃",
      "ᗪ",
      "𝐝",
      "𝔻",
      "𝕕",
      "ᵈ",
    ],
    e: [
      "Ⓔ",
      "乇",
      "ⓔ",
      "є",
      "Ｅ",
      "ｅ",
      "ᗴ",
      "€",
      "є",
      "ε",
      "έ",
      "Ẹ",
      "𝔢",
      "𝒆",
      "𝑒",
      "𝓔",
      "𝐄",
      "𝐞",
      "𝔼",
      "𝕖",
      "ᵉ",
    ],
    f: [
      "Ⓕ",
      "ⓕ",
      "ƒ",
      "Ｆ",
      "ｆ",
      "千",
      "ᖴ",
      "ℱ",
      "Ŧ",
      "ғ",
      "ғ",
      "Ƒ",
      "𝔣",
      "𝒇",
      "𝒻",
      "𝓕",
      "𝐅",
      "𝐟",
      "𝔽",
      "𝕗",
      "ᶠ",
    ],
    g: [
      "Ⓖ",
      "ⓖ",
      "ق",
      "g",
      "Ｇ",
      "ｇ",
      "Ǥ",
      "Ꮆ",
      "ﻮ",
      "g",
      "ģ",
      "Ğ",
      "𝔤",
      "𝓰",
      "𝑔",
      "𝓖",
      "𝐆",
      "𝐠",
      "𝔾",
      "𝕘",
      "ᵍ",
      "Ꮆ",
    ],
    h: [
      "Ⓗ",
      "卄",
      "ⓗ",
      "н",
      "Ｈ",
      "ｈ",
      "ᕼ",
      "Ħ",
      "ђ",
      "н",
      "ħ",
      "Ĥ",
      "𝔥",
      "𝓱",
      "𝒽",
      "𝓗",
      "𝐇",
      "𝐡",
      "ℍ",
      "𝕙",
      "ʰ",
    ],
    i: [
      "Ⓘ",
      "ⓘ",
      "ι",
      "Ｉ",
      "ｉ",
      "Ꭵ",
      "丨",
      "Ɨ",
      "เ",
      "ι",
      "ί",
      "Į",
      "𝔦",
      "𝓲",
      "𝒾",
      "𝓘",
      "𝐈",
      "𝐢",
      "𝕀",
      "𝕚",
      "ᶤ",
    ],
    j: [
      "Ⓙ",
      "ⓙ",
      "נ",
      "Ｊ",
      "ڶ",
      "ｊ",
      "ᒎ",
      "Ĵ",
      "ן",
      "נ",
      "ј",
      "Ĵ",
      "𝔧",
      "𝓳",
      "𝒿",
      "𝓙",
      "𝐉",
      "𝐣",
      "𝕁",
      "𝕛",
      "ʲ",
    ],
    k: [
      "Ⓚ",
      "ⓚ",
      "к",
      "Ｋ",
      "ｋ",
      "ᛕ",
      "Ҝ",
      "к",
      "к",
      "ķ",
      "Ќ",
      "𝔨",
      "𝓴",
      "𝓀",
      "𝓚",
      "𝐊",
      "𝐤",
      "𝕂",
      "𝕜",
      "ᵏ",
      "Ҝ",
    ],
    l: [
      "Ⓛ",
      "ⓛ",
      "ℓ",
      "ㄥ",
      "Ｌ",
      "ｌ",
      "ᒪ",
      "Ł",
      "l",
      "ℓ",
      "Ļ",
      "Ĺ",
      "𝔩",
      "𝓵",
      "𝓁",
      "𝓛",
      "𝐋",
      "𝐥",
      "𝕃",
      "𝕝",
      "ˡ",
    ],
    m: [
      "Ⓜ",
      "ⓜ",
      "м",
      "Ｍ",
      "ｍ",
      "ᗰ",
      "Μ",
      "๓",
      "м",
      "м",
      "ϻ",
      "𝔪",
      "𝓶",
      "𝓂",
      "𝓜",
      "𝐌",
      "𝐦",
      "𝕄",
      "𝕞",
      "ᵐ",
      "爪",
    ],
    n: [
      "Ⓝ",
      "几",
      "ⓝ",
      "η",
      "Ｎ",
      "ｎ",
      "ᑎ",
      "Ň",
      "ภ",
      "η",
      "ή",
      "Ň",
      "𝔫",
      "𝓷",
      "𝓃",
      "𝓝",
      "𝐍",
      "𝐧",
      "ℕ",
      "𝕟",
      "ᶰ",
    ],
    o: [
      "Ⓞ",
      "ㄖ",
      "ⓞ",
      "σ",
      "Ｏ",
      "ｏ",
      "ᗝ",
      "Ø",
      "๏",
      "σ",
      "ό",
      "Ỗ",
      "𝔬",
      "𝓸",
      "𝑜",
      "𝓞",
      "𝐎",
      "𝐨",
      "𝕆",
      "𝕠",
      "ᵒ",
    ],
    p: [
      "Ⓟ",
      "ⓟ",
      "ρ",
      "Ｐ",
      "ｐ",
      "卩",
      "ᑭ",
      "Ƥ",
      "ק",
      "ρ",
      "ρ",
      "Ƥ",
      "𝔭",
      "𝓹",
      "𝓅",
      "𝓟",
      "𝐏",
      "𝐩",
      "ℙ",
      "𝕡",
      "ᵖ",
    ],
    q: [
      "Ⓠ",
      "ⓠ",
      "q",
      "Ｑ",
      "ｑ",
      "Ɋ",
      "Ω",
      "ợ",
      "q",
      "q",
      "Ǫ",
      "𝔮",
      "𝓺",
      "𝓆",
      "𝓠",
      "𝐐",
      "𝐪",
      "ℚ",
      "𝕢",
      "ᵠ",
    ],
    r: [
      "Ⓡ",
      "ⓡ",
      "я",
      "尺",
      "Ｒ",
      "ｒ",
      "ᖇ",
      "Ř",
      "г",
      "я",
      "ŕ",
      "Ř",
      "𝔯",
      "𝓻",
      "𝓇",
      "𝓡",
      "𝐑",
      "𝐫",
      "ℝ",
      "𝕣",
      "ʳ",
    ],
    s: [
      "Ⓢ",
      "ⓢ",
      "ѕ",
      "Ｓ",
      "丂",
      "ｓ",
      "ᔕ",
      "Ş",
      "ร",
      "s",
      "ş",
      "Ŝ",
      "𝔰",
      "𝓼",
      "𝓈",
      "𝓢",
      "𝐒",
      "𝐬",
      "𝕊",
      "𝕤",
      "ˢ",
    ],
    t: [
      "Ⓣ",
      "ⓣ",
      "т",
      "Ｔ",
      "ｔ",
      "丅",
      "Ŧ",
      "t",
      "т",
      "ţ",
      "Ť",
      "𝔱",
      "𝓽",
      "𝓉",
      "𝓣",
      "𝐓",
      "𝐭",
      "𝕋",
      "𝕥",
      "ᵗ",
    ],
    u: [
      "Ⓤ",
      "ⓤ",
      "υ",
      "Ｕ",
      "ｕ",
      "ᑌ",
      "Ữ",
      "ย",
      "υ",
      "ù",
      "Ǘ",
      "𝔲",
      "𝓾",
      "𝓊",
      "𝓤",
      "𝐔",
      "𝐮",
      "𝕌",
      "𝕦",
      "ᵘ",
    ],
    v: [
      "Ⓥ",
      "ⓥ",
      "ν",
      "Ｖ",
      "ｖ",
      "ᐯ",
      "V",
      "ש",
      "v",
      "ν",
      "Ѷ",
      "𝔳",
      "𝓿",
      "𝓋",
      "𝓥",
      "𝐕",
      "𝐯",
      "𝕍",
      "𝕧",
      "ᵛ",
    ],
    w: [
      "Ⓦ",
      "ⓦ",
      "ω",
      "Ｗ",
      "ｗ",
      "ᗯ",
      "Ŵ",
      "ฬ",
      "ω",
      "ώ",
      "Ŵ",
      "𝔴",
      "𝔀",
      "𝓌",
      "𝓦",
      "𝐖",
      "𝐰",
      "𝕎",
      "𝕨",
      "ʷ",
      "山",
    ],
    x: [
      "Ⓧ",
      "ⓧ",
      "χ",
      "Ｘ",
      "乂",
      "ｘ",
      "᙭",
      "Ж",
      "א",
      "x",
      "x",
      "Ж",
      "𝔵",
      "𝔁",
      "𝓍",
      "𝓧",
      "𝐗",
      "𝐱",
      "𝕏",
      "𝕩",
      "ˣ",
    ],
    y: [
      "Ⓨ",
      "ㄚ",
      "ⓨ",
      "у",
      "Ｙ",
      "ｙ",
      "Ƴ",
      "¥",
      "ץ",
      "ү",
      "ч",
      "Ў",
      "𝔶",
      "𝔂",
      "𝓎",
      "𝓨",
      "𝐘",
      "𝐲",
      "𝕐",
      "𝕪",
      "ʸ",
    ],
    z: [
      "Ⓩ",
      "ⓩ",
      "z",
      "乙",
      "Ｚ",
      "ｚ",
      "Ƶ",
      "Ž",
      "z",
      "z",
      "ž",
      "Ż",
      "𝔷",
      "𝔃",
      "𝓏",
      "𝓩",
      "𝐙",
      "𝐳",
      "ℤ",
      "𝕫",
      "ᶻ",
    ],
  };
  if (map[c]) {
    return randomElement(map[c]);
  } else {
    return c;
  }
}
function randomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}
function randomSymbols(n) {
  var symbols = [
    "🐙",
    "🐉",
    "🐊",
    "🐒",
    "🐝",
    "🐜",
    "🐚",
    "🐲",
    "🐳",
    "🐸",
    "👑",
    "👹",
    "👺",
    "👤",
    "💲",
    "💣",
    "💙",
    "💚",
    "💛",
    "💜",
    "💝",
    "💗",
    "💘",
    "💞",
    "💔",
    "💥",
    "🐯",
    "🐼",
    "🐻",
    "🐺",
    "👌",
    "🐍",
    "🐧",
    "🐟",
    "🐠",
    "🐨",
    "🎯",
    "🏆",
    "🎁",
    "🎀",
    "🎉",
    "🎈",
    "🍮",
    "🍭",
    "🍬",
    "🍫",
    "🍪",
    "🍧",
    "🌷",
    "🍓",
    "😺",
    "😾",
    "✎",
    "😎",
    "😝",
    "😂",
    "😈",
    "😡",
    "😲",
    "😳",
    "🍔",
    "🍟",
    "🍩",
    "🎃",
    "🎄",
    "🎅",
    "🐣",
    "🐤",
    "👍",
    "👊",
    "👻",
    "👽",
    "👮",
    "💎",
    "💋",
    "👣",
    "💀",
    "💢",
    "🔥",
    "♔",
    "♕",
    "♖",
    "♗",
    "♘",
    "♙",
    "♚",
    "♛",
    "♜",
    "♝",
    "♞",
    "♟",
    "♠",
    "♡",
    "♢",
    "♣",
    "♤",
    "♥",
    "♦",
    "♧",
    "♨",
    "♩",
    "♪",
    "♬",
    "★",
    "☆",
    "☺",
    "☹",
    "☯",
    "☮",
    "☢",
    "☠",
    "☟",
    "☞",
    "☝",
    "☜",
    "✌",
    "✋",
    "✊",
    "⛵",
    "ൠ",
    "✌",
    "ඏ",
  ];
  var s = [];
  for (var i = 0; i < n; i++) s.push(randomElement(symbols));
  return s.join("");
}
function randInt(min, max) {
  return min + Math.floor(Math.random() * (max - min + 1));
}

$(document).ready(function () {
  $(
    "<style> // Font Generator by The Nitesh Arya: hackersaitand@gmail.com </style>"
  ).insertBefore("body");

  $("#fontSize").on("input change", function () {
    $(
      "<style> .aryafonts p{font-size:" + $(this).val() + "px} </style>"
    ).insertBefore("body");
  });

  gen(default_text);

  $(".thenitesharya-text").on("input", function (e) {
    if ($("#thenitesharya-text").val() < 1) {
      gen(default_text);
    } else {
      var text = $("#thenitesharya-text").val();
      gen(text);
    }
  });

  var url = window.location.href;
  var params = url.split("?=");
  urltext = params[1];
  if (urltext) {
    urltext = decodeURIComponent(urltext);
    $("#thenitesharya-text").val(urltext);
    gen(urltext);
  }

  function gen(text) {
    text = text.trim();

    $(".result-s1").html(Change(text, "s1"));
    $(".result-s2").html(Change(text, "s2"));
    $(".result-s3").html(Change(text, "s3"));
    $(".result-s4").html(Change(text, "s4"));
    $(".result-s5").html(Change(text, "s5"));
    $(".result-s6").html(Change(text, "s6"));
    $(".result-s7").html(Change(text, "s7"));
    $(".result-s8").html(Change(text, "s8"));
    $(".result-s9").html(Change(text, "s9"));
    $(".result-s10").html(Change(text, "s10"));
    $(".result-s11").html(Change(text, "s11"));
    $(".result-s12").html(Change(text, "s12"));
    $(".result-s13").html(Change(text, "s13"));
    $(".result-s14").html(Change(text, "s14"));
    $(".result-s15").html(Change(text, "s15"));
    $(".result-s16").html(Change(text, "s16"));
    $(".result-s17").html(Change(text, "s17"));
    $(".result-s18").html(Change(text, "s18"));
    $(".result-s19").html(Change(text, "s19"));
    $(".result-s20").html(Change(text, "s20"));
    $(".result-s21").html(Change(text, "s21"));
    $(".result-s22").html(Change(text, "s22"));
    $(".result-s23").html(Change(text, "s23"));
    $(".result-s24").html(Change(text, "s24"));
    $(".result-s25").html(Change(text, "s25"));
    $(".result-s26").html(Change(text, "s26"));
    $(".result-s27").html(Change(text, "s27"));
    $(".result-s29").html(Change(text, "s29"));
    $(".result-s30").html(Change(text, "s30"));
    $(".result-s31").html(Change(text, "s31"));
    $(".lunitoolsbubbles").html(luni.tools.bubbles.encode(text));
    $(".invertedSquaresCharMap").html(
      applyCharMap(invertedSquaresCharMap, text)
    );
    $(".illuminati").html(illuminati(text));
    $(".textgun").html(textgun(text));
    $(".minigame").html(minigame(text));
    $(".pubggame1").html(pubggame1(text));
    $(".pubggame2").html(pubggame2(text));
    $(".pubggame3").html(pubggame3(text));
    $(".bricks").html(bricks(text));
    $(".bigrus").html(bigrus(text));
    $(".wideTextCharMap").html(applyCharMap(wideTextCharMap, text));
    $(".lunitoolstinyencode").html(luni.tools.tiny.encode(text));
    $(".lunitoolsflipencode").html(luni.tools.flip.encode(text));
    $(".squaresCharMap").html(applyCharMap(squaresCharMap, text));
    $(".lunitoolsmirrorencode").html(luni.tools.mirror.encode(text));
    $(".subscriptCharMap").html(applyCharMap(subscriptCharMap, text));
    $(".superscriptCharMap").html(applyCharMap(superscriptCharMap, text));
    $(".bentTextCharMap").html(applyCharMap(bentTextCharMap, text));
    $(".neonCharMap").html(applyCharMap(neonCharMap, text));
    $(".futureAlienCharMap").html(applyCharMap(futureAlienCharMap, text));
    $(".strikeThrough").html(strikeThrough(text));
    $(".tildeStrikeThrough").html(tildeStrikeThrough(text));
    $(".slashThrough").html(slashThrough(text));
    $(".underline").html(underline(text));
    $(".doubleUnderline").html(doubleUnderline(text));
    $(".lunicreepify").html(luni.tools.creepify.encode(text));
    $(".squiggleCharMap").html(applyCharMap(squiggleCharMap, text));
    $(".squiggle2CharMap").html(applyCharMap(squiggle2CharMap, text));
    $(".squiggle3CharMap").html(applyCharMap(squiggle3CharMap, text));
    $(".squiggle4CharMap").html(applyCharMap(squiggle4CharMap, text));
    $(".squiggle5CharMap").html(applyCharMap(squiggle5CharMap, text));
    $(".squiggle6CharMap").html(applyCharMap(squiggle6CharMap, text));
    $(".boldCharMap").html(applyCharMap(boldCharMap, text));
    $(".luniroundsquares").html(luni.tools.roundsquares.encode(text));
    $(".lunisquares").html(luni.tools.squares.encode(text.toUpperCase()));
    $(".oldEnglishCharMap").html(applyCharMap(oldEnglishCharMap, text));
    $(".medievalCharMap").html(applyCharMap(medievalCharMap, text));
    $(".cursiveCharMap").html(applyCharMap(cursiveCharMap, text));
    $(".scriptify").html(scriptify(text));
    $(".doubleStruckCharMap").html(applyCharMap(doubleStruckCharMap, text));
    $(".italicCharMap").html(applyCharMap(italicCharMap, text));
    $(".boldItalicCharMap").html(applyCharMap(boldItalicCharMap, text));
    $(".monospaceCharMap").html(applyCharMap(monospaceCharMap, text));
    $(".upperAnglesCharMap").html(applyCharMap(upperAnglesCharMap, text));
    $(".greekCharMap").html(applyCharMap(greekCharMap, text));
    $(".symbolsCharMap").html(applyCharMap(symbolsCharMap, text));
    $(".currencyCharMap").html(applyCharMap(currencyCharMap, text));
    $(".asianStyleCharMap").html(applyCharMap(asianStyleCharMap, text));
    $(".asianStyle2CharMap").html(applyCharMap(asianStyle2CharMap, text));
    $(".thickBlockFramed").html(thickBlockFramed(text));
    $(".diametricAngleFrame").html(diametricAngleFrame(text));
    $(".wavyJoiner").html(wavyJoiner(text));
    $(".dottyJoiner").html(dottyJoiner(text));
    $(".kirbyHug").html(kirbyHug(text));
    $(".vaporwaveText").html(vaporwaveText(text));
    $(".vaporwaveText1").html(vaporwaveText1(text));
    $(".vaporwaveText2").html(vaporwaveText2(text));
    $(".littleSparkles").html(littleSparkles(text));
    $(".weirdBox").html(weirdBox(text));
    $(".thickBox").html(thickBox(text));
    $(".zigzagJoiner").html(zigzagJoiner(text));
    $(".hashJoiner").html(hashJoiner(text));
    $(".starJoiner").html(starJoiner(text));
    $(".connectedJoiner").html(connectedJoiner(text));
    $(".arrowjoin").html(arrowjoin(text));
    $(".dotBoxtwo").html(dotBoxtwo(text));
    $(".dotBox").html(dotBox(text));
    $(".diametricBox").html(diametricBox(text));
    $(".arrowBox").html(arrowBox(text));
    $(".curlybrackets").html(curlybrackets(text));
    $(".singlewavyJoiner").html(singlewavyJoiner(text));
    $(".firework").html(firework(text));
    $(".stinky").html(stinky(text));
    $(".heartsBetween").html(heartsBetween(text));
    $(".arrowBelow").html(arrowBelow(text));
    $(".crossAboveBelow").html(crossAboveBelow(text));
    $(".wingdings").html(wingdings(text));
    $(".fullCrazy").html(fullCrazy(text));
    $(".crazyWithFlourishOrSymbols").html(crazyWithFlourishOrSymbols(text));
    $(".cuteText").html(cuteText(text));
  }

  $(".clear").click(function () {
    $("#thenitesharya-text").val("");
  });

  function copied() {
    var copied = document.querySelector(".copied");
    var copyTxt = copied.querySelector(".text");
    document.querySelectorAll(".aryafonts").forEach((e) => {
      e.addEventListener("click", () => {
        copyTxt.value = e.querySelector("p").innerText;
        copyit(copyTxt);
        copied.classList.add("copied-show");
        setTimeout(() => {
          copied.classList.remove("copied-show");
        }, 1000);
      });
    });
  }
  copied();

  function copyit(text) {
    var textarea = document.createElement("textarea");
    textarea.value = text.innerText || text.value;
    document.body.appendChild(textarea);
    textarea.select();
    document.execCommand("copy");
    textarea.remove();
  }
});
